// Generated by CoffeeScript 1.10.0
var CurriculumView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CurriculumView = (function(superClass) {
  extend(CurriculumView, superClass);

  function CurriculumView() {
    return CurriculumView.__super__.constructor.apply(this, arguments);
  }

  CurriculumView.prototype.className = "CurriculumView";

  CurriculumView.prototype.events = {
    "click .back": "goBack",
    "click .delete": "deleteCurriculum",
    "click .delete_subtest": "deleteSubtest",
    "click .edit_in_place": "editInPlace",
    'click .new_subtest': "newSubtest",
    "focusout .editing": "editing",
    "keyup    .editing": "editing",
    "keydown  .editing": "editing"
  };

  CurriculumView.prototype.initialize = function(options) {
    this.curriculum = options.curriculum;
    this.subtests = options.subtests;
    this.questions = options.questions;
    this.questionsBySubtestId = this.questions.indexBy("subtestId");
    this.totalAssessments = Math.max.apply(Math, this.subtests.pluck("part"));
    this.subtestsByPart = this.subtests.indexArrayBy("part");
    return this.subtestProperties = {
      "grid": [
        {
          "key": "part",
          "label": "Assessment",
          "editable": true
        }, {
          "key": "name",
          "label": "Name",
          "editable": true,
          "escaped": true
        }, {
          "key": "timer",
          "label": "Time<br>allowed",
          "editable": true
        }, {
          "key": "reportType",
          "label": "Report",
          "editable": true
        }, {
          "key": "items",
          "label": "Items",
          "count": true,
          "editable": true
        }
      ],
      "survey": [
        {
          "key": "part",
          "label": "Assessment",
          "editable": true
        }, {
          "key": "name",
          "label": "Name",
          "editable": true
        }, {
          "key": "reportType",
          "label": "Report",
          "editable": true
        }
      ]
    };
  };

  CurriculumView.prototype.render = function() {
    var deleteButton, html, newButtons, subtestTable;
    subtestTable = this.getSubtestTable();
    deleteButton = Tangerine.settings.get("context") === "server" ? "<button class='command_red delete'>Delete</button>" : "";
    if (Tangerine.settings.get("context") === "server") {
      newButtons = "<button class='command new_subtest' data-prototype='grid'>New Grid Subtest</button><br> <button class='command new_subtest' data-prototype='survey'>New Survey Subtest</button>";
    }
    html = "<button class='navigation back'>" + (t('back')) + "</button> <h1>" + (this.options.curriculum.get('name')) + "</h1> <div class='small_grey'>Download key <b>" + (this.curriculum.id.substr(-5, 5)) + "</b></div> <div id='subtest_table_container'> " + subtestTable + " </div> " + (newButtons || "") + " <br><br> " + deleteButton;
    this.$el.html(html);
    return this.trigger("rendered");
  };

  CurriculumView.prototype.updateTable = function() {
    return this.$el.find("#subtest_table_container").html(this.getSubtestTable());
  };

  CurriculumView.prototype.getSubtestTable = function() {
    var bodyHtml, headerHtml, html, i, items, j, len, len1, part, prompts, prop, question, ref, ref1, subtest, subtests;
    html = "<table class='subtests'>";
    html += "<tbody>";
    this.subtestsByPart = this.subtests.indexArrayBy("part");
    ref = this.subtestsByPart;
    for (part in ref) {
      subtests = ref[part];
      html += "<tr><td>&nbsp;</td></tr>";
      for (i = 0, len = subtests.length; i < len; i++) {
        subtest = subtests[i];
        headerHtml = bodyHtml = "";
        ref1 = this.subtestProperties[subtest.get("prototype")];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          prop = ref1[j];
          headerHtml += "<th>" + prop.label + "</th>";
          bodyHtml += this.propCook(prop, subtest);
        }
        html += "<tr>" + headerHtml + "</tr>";
        html += "<tr>" + bodyHtml;
        if (Tangerine.settings.get("context") === "server") {
          html += "<td> <a href='#class/subtest/" + subtest.id + "'><img class='link_icon edit' title='Edit' src='images/icon_edit.png'></a> <img class='link_icon delete_subtest' title='Delete' data-subtestId='" + subtest.id + "' src='images/icon_delete.png'> <a href='#class/run/test/" + subtest.id + "'><img class='link_icon testRun' title='Test run' src='images/icon_run.png'></a> </td> </tr>";
        }
        if (subtest.get("prototype") === "grid") {
          items = subtest.get("items").join(" ");
          html += "<tr><td colspan='" + this.subtestProperties['grid'].length + "'>" + items + "</td></tr>";
        }
        if (subtest.get("prototype") === "survey" && (this.questionsBySubtestId[subtest.id] != null)) {
          prompts = ((function() {
            var k, len2, ref2, results;
            ref2 = this.questionsBySubtestId[subtest.id];
            results = [];
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              question = ref2[k];
              results.push(question.get("prompt"));
            }
            return results;
          }).call(this)).join(", ");
          html += "<tr><td colspan='" + this.subtestProperties['survey'].length + "'>" + prompts + "</td></tr>";
        }
      }
    }
    html += "</tbody> </table>";
    return html;
  };

  CurriculumView.prototype.propCook = function(prop, subtest) {
    var editOrNot, numberOrNot, value;
    value = prop.key != null ? subtest.get(prop.key) : "&nbsp;";
    value = prop.escape ? subtest.escape(prop.key) : value;
    if (prop.count != null) {
      value = value.length;
    }
    if (value == null) {
      value = "";
    }
    editOrNot = prop.editable && Tangerine.settings.get("context") === "server" ? "class='edit_in_place'" : "";
    numberOrNot = _.isNumber(value) ? "data-isNumber='true'" : "data-isNumber='false'";
    return "<td class='edit_in_place'><span data-subtestId='" + subtest.id + "' data-key='" + prop.key + "' data-value='" + value + "' " + editOrNot + " " + numberOrNot + ">" + value + "</div></td>";
  };

  CurriculumView.prototype.editInPlace = function(event) {
    var $span, $target, $td, $textarea, classes, guid, isNumber, key, margins, oldValue, subtest, subtestId, transferVariables;
    if (this.alreadyEditing) {
      return;
    }
    this.alreadyEditing = true;
    $span = $(event.target);
    if ($span.prop("tagName") === "TD") {
      $span = $span.find("span");
      if ($span.length === 0) {
        return;
      }
    }
    $td = $span.parent();
    this.$oldSpan = $span.clone();
    if ($span.prop("tagName") === "TEXTAREA") {
      return;
    }
    guid = Utils.guid();
    key = $span.attr("data-key");
    isNumber = $span.attr("data-isNumber") === "true";
    subtestId = $span.attr("data-subtestId");
    subtest = this.subtests.get(subtestId);
    oldValue = subtest.get(key);
    $target = $(event.target);
    classes = ($target.attr("class") || "").replace("settings", "");
    margins = $target.css("margin");
    if (key === 'items') {
      oldValue = oldValue.join(" ");
    }
    transferVariables = "data-isNumber='" + isNumber + "' data-key='" + key + "' data-subtestId='" + subtestId + "' ";
    $td.html("<textarea id='" + guid + "' " + transferVariables + " class='editing " + classes + "' style='margin:" + margins + "'>" + oldValue + "</textarea>");
    $textarea = $("#" + guid);
    return $textarea.focus();
  };

  CurriculumView.prototype.editing = function(event) {
    var $target, $td, attributes, isNumber, key, newValue, oldValue, subtest, subtestId;
    $target = $(event.target);
    $td = $target.parent();
    if (event.which === 27 || event.type === "focusout") {
      $target.remove();
      $td.html(this.$oldSpan);
      this.alreadyEditing = false;
      return;
    }
    if (!(event.which === 13 && event.type === "keydown")) {
      return true;
    }
    this.alreadyEditing = false;
    key = $target.attr("data-key");
    isNumber = $target.attr("data-isNumber") === "true";
    subtestId = $target.attr("data-subtestId");
    subtest = this.subtests.get(subtestId);
    oldValue = subtest.get(key);
    newValue = $target.val();
    newValue = isNumber ? parseInt(newValue) : newValue;
    if (key === "items") {
      newValue = newValue.replace(/\s+/g, ' ');
      if (/\t|,/.test(newValue)) {
        alert("Please remember\n\nGrid items are space \" \" delimited");
      }
      newValue = _.compact(newValue.split(" "));
    }
    if (String(newValue) !== String(oldValue)) {
      attributes = {};
      attributes[key] = newValue;
      subtest.save(attributes, {
        success: (function(_this) {
          return function() {
            Utils.midAlert("Subtest saved");
            return subtest.fetch({
              success: function() {
                return _this.updateTable();
              }
            });
          };
        })(this),
        error: (function(_this) {
          return function() {
            return subtest.fetch({
              success: function() {
                _this.updateTable();
                return alert("Please try to save again, it didn't work that time.");
              }
            });
          };
        })(this)
      });
    }
    return false;
  };

  CurriculumView.prototype.goBack = function() {
    if (Tangerine.settings.get("context") === "server") {
      return Tangerine.router.navigate("assessments", true);
    } else if (Tangerine.settings.get("context") === "class") {
      return Tangerine.router.navigate("class", true);
    }
  };

  CurriculumView.prototype.deleteCurriculum = function() {
    if (confirm("Delete curriculum\n" + (this.curriculum.get('name')) + "?")) {
      return this.curriculum.destroy((function(_this) {
        return function() {
          return Tangerine.router.navigate("assessments", true);
        };
      })(this));
    }
  };

  CurriculumView.prototype.newSubtest = function(event) {
    var guid, protoTemps, prototype, subtest, subtestAttributes;
    prototype = $(event.target).attr("data-prototype");
    guid = Utils.guid();
    subtestAttributes = {
      "_id": guid,
      "curriculumId": this.curriculum.id,
      "prototype": prototype,
      "captureLastAttempted": false,
      "endOfLine": false
    };
    protoTemps = Tangerine.templates.get("prototypes");
    subtestAttributes = $.extend(protoTemps[prototype], subtestAttributes);
    subtest = new Subtest(subtestAttributes);
    return subtest.save(null, {
      success: function() {
        return Tangerine.router.navigate("class/subtest/" + guid, true);
      },
      error: function() {
        return alert("Please try again. There was a problem creating the new subtest.");
      }
    });
  };

  CurriculumView.prototype.deleteSubtest = function(event) {
    var subtest, subtestId;
    subtestId = $(event.target).attr("data-subtestId");
    subtest = this.subtests.get(subtestId);
    if (confirm("Delete subtest\n" + (subtest.get('name')) + "?")) {
      return subtest.destroy({
        success: (function(_this) {
          return function() {
            _this.subtests.remove(subtestId);
            return _this.updateTable();
          };
        })(this),
        error: (function(_this) {
          return function() {
            return alert("Please try again, could not delete subtest.");
          };
        })(this)
      });
    }
  };

  return CurriculumView;

})(Backbone.View);
