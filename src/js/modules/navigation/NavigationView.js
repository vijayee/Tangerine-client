// Generated by CoffeeScript 1.10.0
var NavigationView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

NavigationView = (function(superClass) {
  extend(NavigationView, superClass);

  function NavigationView() {
    this.handleMenu = bind(this.handleMenu, this);
    this.initialize = bind(this.initialize, this);
    this.userMenuOut = bind(this.userMenuOut, this);
    this.userMenuIn = bind(this.userMenuIn, this);
    this.calcWhoAmI = bind(this.calcWhoAmI, this);
    return NavigationView.__super__.constructor.apply(this, arguments);
  }

  NavigationView.prototype.el = '#navigation';

  NavigationView.prototype.events = Modernizr.touch ? {
    'click #logout': 'logout',
    'click #navigation-logo': 'logoClick',
    'click #username': 'gotoAccount'
  } : {
    'click #logout': 'logout',
    'click #navigation-logo': 'logoClick',
    'click #username': 'gotoAccount'
  };

  NavigationView.prototype.calcWhoAmI = function() {
    return this.whoAmI = "User";
  };

  NavigationView.prototype.refreshDropDownPosition = function() {
    var $ul, userPosistion;
    userPosistion = this.$el.find("#username-container").position();
    $ul = this.$el.find("#username-dropdown");
    return $ul.css({
      left: Math.min(userPosistion.left, $(window).width() - $ul.width())
    });
  };

  NavigationView.prototype.userMenuIn = function() {
    this.refreshDropDownPosition();
    return this.$el.find("#username-dropdown").show();
  };

  NavigationView.prototype.userMenuOut = function() {
    this.refreshDropDownPosition();
    return this.$el.find("#username-dropdown").hide();
  };

  NavigationView.prototype.gotoAccount = function() {
    if (this.user.isAdmin()) {
      return Tangerine.router.navigate("account", true);
    }
  };

  NavigationView.prototype.logoClick = function() {
    if (this.user.isAdmin()) {
      Tangerine.activity = "";
      return this.router.landing(true);
    } else {
      if (Tangerine.activity === "assessment run") {
        if (confirm(this.text.incomplete_main)) {
          return this.router.landing(true);
        }
      } else {
        return this.router.landing(true);
      }
    }
  };

  NavigationView.prototype.logout = function() {
    if (this.user.isAdmin()) {
      Tangerine.activity = "";
      return Tangerine.user.logout();
    } else {
      if (Tangerine.activity === "assessment run") {
        if (confirm(this.text.incomplete_logout)) {
          Tangerine.activity = "";
          return Tangerine.user.logout();
        }
      } else {
        if (confirm(this.text.confirm_logout)) {
          Tangerine.activity = "";
          return Tangerine.user.logout();
        }
      }
    }
  };

  NavigationView.prototype.onClose = function() {};

  NavigationView.prototype.initialize = function(options) {
    this.$el.addClass("NavigationView");
    this.i18n();
    this.render();
    this.user = options.user;
    this.router = options.router;
    this.calcWhoAmI();
    this.router.on('all', this.handleMenu);
    return this.user.on('login logout', this.handleMenu);
  };

  NavigationView.prototype.i18n = function() {
    return this.text = {
      "logout": t('NavigationView.button.logout'),
      "account_button": t('NavigationView.button.account'),
      "settings_button": t('NavigationView.button.settings'),
      "user": t('NavigationView.label.user'),
      "teacher": t('NavigationView.label.teacher'),
      "enumerator": t('NavigationView.label.enumerator'),
      "student_id": t('NavigationView.label.student_id'),
      "version": t('NavigationView.label.version'),
      "account": t('NavigationView.help.account'),
      "logo": t('NavigationView.help.logo'),
      "incomplete_logout": t("NavigationView.message.incomplete_logout"),
      "confirm_logout": t("NavigationView.message.logout_confirm"),
      "incomplete_main": t("NavigationView.message.incomplete_main_screen")
    };
  };

  NavigationView.prototype.render = function() {
    var ref;
    this.$el.html("<img id='navigation-logo' src='images/navigation-logo.png' title='" + this.text.logo + "'> <ul> <li id='student-container' class='hidden'> <label>" + this.text.student_id + "</label> <div id='student-id'></div> </li> <li id='username-container'> <label title='" + this.text.account + "'>" + this.whoAmI + "</label> <div id='username'>" + (Tangerine.user.name() || "") + "</div> <ul id='username-dropdown'> <li><a href='#account'>" + this.text.account_button + "</a></li> <li><a href='#settings'>" + this.text.settings_button + "</a></li> </ul> </li> <li id='logout'>" + this.text.logout + "</li> </ul>");
    if ((ref = this.user) != null ? typeof ref.isAdmin === "function" ? ref.isAdmin() : void 0 : void 0) {
      this.$el.find("#username-container").hover(this.userMenuIn, this.userMenuOut);
    }
    $(document).ajaxStart(function() {
      if ($("#navigation-logo").attr("src") !== "images/navigation-logo-spin.gif") {
        return $("#navigation-logo").attr("src", "images/navigation-logo-spin.gif");
      }
    });
    return $(document).ajaxStop(function() {
      if ($("#navigation-logo").attr("src") !== "images/navigation-logo.png") {
        return $("#navigation-logo").attr("src", "images/navigation-logo.png");
      }
    });
  };

  NavigationView.prototype.setStudent = function(id) {
    if (id === "") {
      this.$el.find("#student-container").addClass("hidden");
      return this.$el.find('#student-id').html("");
    } else {
      this.$el.find("#student-container").removeClass("hidden");
      return this.$el.find('#student-id').html(id);
    }
  };

  NavigationView.prototype.handleMenu = function(event) {
    this.calcWhoAmI();
    $("#username_label").html(this.whoAmI);
    $('#username').html(this.user.name());
    if (~window.location.toString().indexOf("name=")) {
      this.$el.find("#logout_link").hide();
    } else {
      this.$el.find("#logout_link").show();
    }
    return this.user.verify({
      isAuthenticated: (function(_this) {
        return function() {
          _this.render();
          return $('#navigation').fadeIn(250);
        };
      })(this),
      isUnregistered: (function(_this) {
        return function() {
          _this.render();
          return $('#navigation').fadeOut(250);
        };
      })(this)
    });
  };

  return NavigationView;

})(Backbone.View);
