// Generated by CoffeeScript 1.10.0
var AccountView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AccountView = (function(superClass) {
  extend(AccountView, superClass);

  function AccountView() {
    this.renderGroups = bind(this.renderGroups, this);
    return AccountView.__super__.constructor.apply(this, arguments);
  }

  AccountView.prototype.className = "AccountView";

  AccountView.prototype.events = {
    'click .leave': 'leaveGroup',
    'click .join_cancel': 'joinToggle',
    'click .join': 'joinToggle',
    'click .join_group': 'join',
    'click .back': 'goBack',
    'click .update': 'update',
    'click .restart': 'restart',
    'click .send_debug': 'sendDebug',
    "click .edit_in_place": "editInPlace",
    "focusout .editing": "editing",
    "keyup    .editing": "editing",
    "keydown  .editing": "editing",
    'click .change_password': "togglePassword",
    'click .confirm_password': "saveNewPassword"
  };

  AccountView.prototype.togglePassword = function() {
    var $menu;
    $menu = this.$el.find(".password_menu");
    $menu.toggle();
    if ($menu.is(":visible")) {
      return this.$el.find("#new_password").focus().scrollTo();
    }
  };

  AccountView.prototype.saveNewPassword = function() {
    var pass;
    pass = this.$el.find(".new_password").val();
    Tangerine.user.setPassword(pass);
    return Tangerine.user.save(null, {
      success: (function(_this) {
        return function() {
          _this.$el.find(".new_password").val('');
          _this.togglePassword();
          return Utils.midAlert("Password changed");
        };
      })(this)
    });
  };

  AccountView.prototype.sendDebug = function() {
    return Tangerine.$db.view(Tangerine.design_doc + "/byCollection", {
      keys: ["teacher", "klass", "student", "config", "settings"],
      success: function(response) {
        var docId, saveReport;
        docId = "debug-report-" + (Tangerine.settings.get('instanceId'));
        saveReport = function(response, oldRev, docId) {
          var doc;
          if (oldRev == null) {
            oldRev = null;
          }
          doc = {
            _id: docId,
            _rev: oldRev,
            docs: _.pluck(response.rows, "value"),
            collection: "debug_report"
          };
          if (doc._rev == null) {
            delete doc._rev;
          }
          return Tangerine.$db.saveDoc(doc, {
            success: function() {
              return $.couch.replicate(Tangerine.db_name, Tangerine.settings.urlDB("group"), {
                success: function() {
                  return Utils.sticky("Debug report sent", "Ok");
                }
              }, {
                doc_ids: [docId]
              });
            }
          });
        };
        return Tangerine.$db.openDoc(docId, {
          success: function(oldDoc) {
            return saveReport(response, oldDoc._rev, docId);
          },
          error: function(error) {
            return saveReport(response, null, docId);
          }
        });
      }
    });
  };

  AccountView.prototype.update = function() {
    var doResolve;
    doResolve = this.$el.find("#attempt_resolve").is(":checked");
    return Utils.updateTangerine(doResolve);
  };

  AccountView.prototype.restart = function() {
    return Utils.restartTangerine();
  };

  AccountView.prototype.goBack = function() {
    if (Tangerine.settings.get("context") === "server") {
      return Tangerine.router.navigate("groups", true);
    } else {
      return window.history.back();
    }
  };

  AccountView.prototype.joinToggle = function() {
    this.$el.find(".join, .join_confirmation").fadeToggle(0);
    return this.$el.find("#group_name").val("");
  };

  AccountView.prototype.join = function() {
    var group;
    group = this.$el.find("#group_name").val().databaseSafetyDance();
    if (group.length === 0) {
      return;
    }
    return this.user.joinGroup(group, (function(_this) {
      return function() {
        return _this.joinToggle();
      };
    })(this));
  };

  AccountView.prototype.leaveGroup = function(event) {
    var group;
    group = $(event.target).parent().attr('data-group');
    return this.user.leaveGroup(group);
  };

  AccountView.prototype.initialize = function(options) {
    var models;
    this.user = options.user;
    this.teacher = options.teacher;
    models = [];
    if (this.user != null) {
      models.push(this.user);
    }
    if (this.teacher != null) {
      models.push(this.teacher);
    }
    this.models = new Backbone.Collection(models);
    return this.user.on("group-join group-leave group-refresh", this.renderGroups);
  };

  AccountView.prototype.renderGroups = function() {
    var group, html, i, len, ref;
    html = "<ul>";
    ref = this.user.get("groups") || [];
    for (i = 0, len = ref.length; i < len; i++) {
      group = ref[i];
      html += "<li data-group='" + (_.escape(group)) + "'>" + group + " <button class='command leave'>Leave</button></li>";
    }
    html += "</ul>";
    return this.$el.find("#group_wrapper").html(html);
  };

  AccountView.prototype.render = function() {
    var applicationMenu, groupSection, html, logsButton, passwordReset, settingsButton, teachersButton, userEdits;
    if (Tangerine.settings.get("context") === "server") {
      groupSection = "<section> <div class='label_value'> <label>Groups</label> <div id='group_wrapper'></div> <button class='command join'>Join or create a group</button> <div class='confirmation join_confirmation'> <div class='menu_box'> <input id='group_name' placeholder='Group name'> <div class='small_grey'>Please be specific.<br> Good examples: malawi_jun_2012, mike_test_group_2012, egra_group_aug-2012<br> Bad examples: group, test, mine</div><br> <button class='command join_group'>Join Group</button> <button class='command join_cancel'>Cancel</button> </div> </div> </section>";
    }
    if (Tangerine.settings.get("context") !== "server" && Tangerine.user.isAdmin()) {
      settingsButton = "<a href='#settings' class='navigation'><button class='navigation'>Settings</button></a>";
      logsButton = "<a href='#logs' class='navigation'><button class='navigation'>Logs</button></a>";
    }
    if (Tangerine.user.isAdmin() && Tangerine.settings.get("context") !== "server") {
      applicationMenu = "<section> <h2>Application</h2> <table class='menu_box'> <tr> <td><button class='command update'>Update</button></td> <td><input type='checkbox' id='attempt_resolve'></td> <td><label for='attempt_resolve'>Legacy method</label></td> </tr> </table><br> <button class='command restart'>Restart</button><br> <button class='command send_debug'>Send debug report</button> </section>";
    }
    if (Tangerine.user.isAdmin() && Tangerine.settings.get("context") === "class") {
      teachersButton = "<a href='#teachers' class='navigation'><button class='navigation'>Teachers</button></a>";
    }
    userEdits = "server" === Tangerine.settings.get("context") ? this.getEditableRow({
      key: "email",
      name: "Email"
    }, this.user) + this.getEditableRow({
      key: "first",
      name: "First name"
    }, this.user) + this.getEditableRow({
      key: "last",
      name: "Last name"
    }, this.user) : "mobile" === Tangerine.settings.get("context") ? this.getEditableRow({
      key: "email",
      name: "Email"
    }, this.user) : "class" === Tangerine.settings.get("context") ? this.getEditableRow({
      key: "first",
      name: "First name"
    }, this.teacher) + this.getEditableRow({
      key: "last",
      name: "Last name"
    }, this.teacher) + this.getEditableRow({
      key: "gender",
      name: "Gender"
    }, this.teacher) + this.getEditableRow({
      key: "school",
      name: "School"
    }, this.teacher) + this.getEditableRow({
      key: "contact",
      name: "Contact info"
    }, this.teacher) : void 0;
    if ("class" === Tangerine.settings.get("context")) {
      passwordReset = "<button class='change_password command'>Change password</button></td> <div class='password_menu' style='display:none;'> <label for='new_password'>New Password</label><br> <input id='new_password'><br> <button class='confirm_password command'>Change</button> </div>";
    }
    html = "<button class='back navigation'>Back</button> <h1>Manage</h1> " + (settingsButton || "") + " " + (logsButton || "") + " " + (teachersButton || "") + " " + (applicationMenu || "") + " <section> <h2>Account</h2> <table class='class_table'> <tr> <td style='color:black'>Name</td> <td style='color:black'>" + (this.user.name()) + "</td> </tr> " + (userEdits || '') + " </table> " + (passwordReset || '') + " </section> " + (groupSection || "") + " </div>";
    this.$el.html(html);
    if (Tangerine.settings.get("context") === "server") {
      this.renderGroups();
    }
    return this.trigger("rendered");
  };

  AccountView.prototype.getEditableRow = function(prop, model) {
    return "<tr><td>" + prop.name + "</td><td>" + (this.getEditable(prop, model)) + "</td></tr>";
  };

  AccountView.prototype.getEditable = function(prop, model) {
    var editOrNot, numberOrNot, value;
    value = prop.key != null ? model.get(prop.key) : "&nbsp;";
    value = prop.escape ? model.escape(prop.key) : value;
    if ((value == null) || _.isEmptyString(value)) {
      value = "not set";
    }
    editOrNot = prop.editable && Tangerine.settings.get("context") === "server" ? "class='edit_in_place'" : "";
    numberOrNot = _.isNumber(value) ? "data-isNumber='true'" : "data-isNumber='false'";
    return "<div class='edit_in_place'><span data-modelId='" + model.id + "' data-key='" + prop.key + "' data-value='" + value + "' data-name='" + prop.name + "' " + editOrNot + " " + numberOrNot + ">" + value + "</div></div>";
  };

  AccountView.prototype.editInPlace = function(event) {
    var $span, $target, $td, $textarea, classes, guid, isNumber, key, margins, model, modelId, name, oldValue, transferVariables;
    if (this.alreadyEditing) {
      return;
    }
    this.alreadyEditing = true;
    $span = $(event.target);
    $td = $span.parent();
    this.$oldSpan = $span.clone();
    if ($span.hasClass("editing")) {
      return;
    }
    guid = Utils.guid();
    key = $span.attr("data-key");
    name = $span.attr("data-name");
    isNumber = $span.attr("data-isNumber") === "true";
    modelId = $span.attr("data-modelId");
    model = this.models.get(modelId);
    oldValue = model.get(key) || "";
    if (oldValue === "not set") {
      oldValue = "";
    }
    $target = $(event.target);
    classes = ($target.attr("class") || "").replace("settings", "");
    margins = $target.css("margin");
    transferVariables = "data-isNumber='" + isNumber + "' data-key='" + key + "' data-modelId='" + modelId + "' ";
    $td.html("<textarea placeholder='" + name + "' id='" + guid + "' rows='" + (1 + oldValue.count("\n")) + "' " + transferVariables + " class='editing " + classes + "' style='margin:" + margins + "' data-name='" + name + "'>" + oldValue + "</textarea>");
    $textarea = $("#" + guid);
    return $textarea.focus();
  };

  AccountView.prototype.editing = function(event) {
    var $target, $td, attributes, isNumber, key, model, modelId, name, newValue, oldValue;
    $target = $(event.target);
    $td = $target.parent();
    if (event.which === 27 || event.type === "focusout") {
      $target.remove();
      $td.html(this.$oldSpan);
      this.alreadyEditing = false;
      return;
    }
    if (!(event.which === 13 && event.type === "keydown")) {
      return true;
    }
    this.alreadyEditing = false;
    key = $target.attr("data-key");
    isNumber = $target.attr("data-isNumber") === "true";
    modelId = $target.attr("data-modelId");
    name = $target.attr("data-name");
    model = this.models.get(modelId);
    oldValue = model.get(key);
    newValue = $target.val();
    newValue = isNumber ? parseInt(newValue) : newValue;
    if (String(newValue) !== String(oldValue)) {
      attributes = {};
      attributes[key] = newValue;
      model.save(attributes, {
        success: (function(_this) {
          return function() {
            Utils.midAlert(name + " saved");
            return model.fetch({
              success: function() {
                if (_this.updateDisplay != null) {
                  return _this.updateDisplay();
                } else {
                  return _this.render();
                }
              }
            });
          };
        })(this),
        error: (function(_this) {
          return function() {
            return model.fetch({
              success: function() {
                if (_this.updateDisplay != null) {
                  _this.updateDisplay();
                } else {
                  _this.render();
                }
                return alert("Please try to save again, it didn't work that time.");
              }
            });
          };
        })(this)
      });
    }
    return false;
  };

  AccountView.prototype.goBack = function() {
    return window.history.back();
  };

  return AccountView;

})(Backbone.View);
