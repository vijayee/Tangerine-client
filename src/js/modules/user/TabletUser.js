// Generated by CoffeeScript 1.10.0
var Session, TabletUser,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Session = (function() {
  function Session() {}

  Session.prototype.set = function(user) {
    return window.localStorage.setItem("user", user);
  };

  Session.prototype.get = function() {
    return window.localStorage.getItem("user");
  };

  Session.prototype["delete"] = function() {
    return window.localStorage.removeItem("user");
  };

  Session.prototype.exists = function() {
    return window.localStorage.getItem("user") !== null;
  };

  return Session;

})();

TabletUser = (function(superClass) {
  extend(TabletUser, superClass);

  function TabletUser() {
    this.signup = bind(this.signup, this);
    return TabletUser.__super__.constructor.apply(this, arguments);
  }

  TabletUser.prototype.url = 'user';

  TabletUser.prototype.RECENT_USER_MAX = 3;

  TabletUser.prototype.initialize = function(options) {
    return this.myRoles = [];
  };


  /*
    Accessors
   */

  TabletUser.prototype.name = function() {
    return this.get("name") || null;
  };

  TabletUser.prototype.roles = function() {
    return this.getArray("roles");
  };

  TabletUser.prototype.isAdmin = function() {
    return indexOf.call(this.roles(), "_admin") >= 0;
  };

  TabletUser.prototype.recentUsers = function() {
    return Tangerine.settings.getArray("recentUsers");
  };


  /*
    Mutators
   */

  TabletUser.prototype.setPassword = function(pass) {
    var hashes, salt;
    if (pass === "") {
      this.trigger("pass-error", "Password cannot be empty");
    }
    hashes = TabletUser.generateHash(pass);
    salt = hashes['salt'];
    pass = hashes['pass'];
    this.set({
      "pass": pass,
      "salt": salt
    });
    return this;
  };

  TabletUser.prototype.setId = function(name) {
    return this.set({
      "_id": TabletUser.calcId(name),
      "name": name
    });
  };


  /*
    Static methods
   */

  TabletUser.calcId = function(name) {
    return "user-" + name;
  };

  TabletUser.generateHash = function(pass, salt) {
    if (salt == null) {
      salt = hex_sha1("" + Math.random());
    }
    pass = hex_sha1(pass + salt);
    return {
      pass: pass,
      salt: salt
    };
  };


  /*
    helpers
   */

  TabletUser.prototype.verifyPassword = function(providedPass) {
    var realHash, salt, testHash;
    salt = this.get("salt");
    realHash = this.get("pass");
    testHash = TabletUser.generateHash(providedPass, salt)['pass'];
    return testHash === realHash;
  };


  /*
    controller type
   */

  TabletUser.prototype.ghostLogin = function(user, pass) {
    var location;
    Tangerine.log.db("User", "ghostLogin");
    location = encodeURIComponent(window.location.toString());
    return document.location = Tangerine.settings.location.group.url.replace(/\:\/\/.*@/, '://') + ("_ghost/" + user + "/" + pass + "/" + location);
  };

  TabletUser.prototype.signup = function(name, pass, attributes, callbacks) {
    if (callbacks == null) {
      callbacks = {};
    }
    this.set({
      "_id": TabletUser.calcId(name)
    });
    return this.fetch({
      success: (function(_this) {
        return function() {
          return _this.trigger("name-error", "User already exists.");
        };
      })(this),
      error: (function(_this) {
        return function() {
          _this.set({
            "name": name
          });
          _this.setPassword(pass);
          return _this.save(attributes, {
            success: function() {
              var view;
              if (Tangerine.settings.get("context") === "class") {
                view = new RegisterTeacherView({
                  name: name,
                  pass: pass
                });
                return vm.show(view);
              } else {
                Tangerine.session.set(_this.id);
                _this.trigger("login");
                return typeof callbacks.success === "function" ? callbacks.success() : void 0;
              }
            }
          });
        };
      })(this)
    });
  };

  TabletUser.prototype.login = function(name, pass, callbacks) {
    if (callbacks == null) {
      callbacks = {};
    }
    if (Tangerine.session.exists()) {
      this.trigger("name-error", "User already logged in");
    }
    if (_.isEmpty(this.attributes) || this.get("name") !== name) {
      this.setId(name);
      return this.fetch({
        success: (function(_this) {
          return function() {
            return _this.attemptLogin(pass, callbacks);
          };
        })(this),
        error: function(a, b) {
          return Utils.midAlert("User does not exist.");
        }
      });
    } else {
      return this.attemptLogin(pass, callbacks);
    }
  };

  TabletUser.prototype.attemptLogin = function(pass, callbacks) {
    var recentUsers;
    if (callbacks == null) {
      callbacks = {};
    }
    if (this.verifyPassword(pass)) {
      Tangerine.session.set(this.id);
      this.trigger("login");
      if (typeof callbacks.success === "function") {
        callbacks.success();
      }
      recentUsers = this.recentUsers().filter((function(_this) {
        return function(a) {
          return !~a.indexOf(_this.name());
        };
      })(this));
      recentUsers.unshift(this.name());
      if (recentUsers.length > this.RECENT_USER_MAX) {
        recentUsers.pop();
      }
      Tangerine.settings.save({
        "recentUsers": recentUsers
      });
      return true;
    } else {
      this.trigger("pass-error", t("LoginView.message.error_password_incorrect"));
      Tangerine.session["delete"]();
      if (typeof callbacks.error === "function") {
        callbacks.error();
      }
      return false;
    }
  };

  TabletUser.prototype.sessionRefresh = function(callbacks) {
    if (Tangerine.session.exists()) {
      this.set({
        "_id": Tangerine.session.get()
      });
      return this.fetch({
        error: function() {
          return typeof callbacks.error === "function" ? callbacks.error() : void 0;
        },
        success: function() {
          return callbacks.success();
        }
      });
    } else {
      return callbacks.success();
    }
  };

  TabletUser.prototype.verify = function(callbacks) {
    if (this.name() === null) {
      if ((callbacks != null ? callbacks.isUnregistered : void 0) != null) {
        return callbacks.isUnregistered();
      } else {
        return Tangerine.router.navigate("login", true);
      }
    } else {
      if (callbacks != null) {
        if (typeof callbacks.isAuthenticated === "function") {
          callbacks.isAuthenticated();
        }
      }
      if (this.isAdmin()) {
        return callbacks != null ? typeof callbacks.isAdmin === "function" ? callbacks.isAdmin() : void 0 : void 0;
      } else {
        return callbacks != null ? typeof callbacks.isUser === "function" ? callbacks.isUser() : void 0 : void 0;
      }
    }
  };

  TabletUser.prototype.logout = function() {
    this.clear();
    Tangerine.session["delete"]();
    Tangerine.router.navigate("login", true);
    return Tangerine.log.app("User-logout", "logout");
  };

  return TabletUser;

})(Backbone.Model);
