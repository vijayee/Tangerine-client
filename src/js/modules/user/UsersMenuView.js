// Generated by CoffeeScript 1.10.0
var UsersMenuView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UsersMenuView = (function(superClass) {
  extend(UsersMenuView, superClass);

  function UsersMenuView() {
    return UsersMenuView.__super__.constructor.apply(this, arguments);
  }

  UsersMenuView.prototype.className = "UsersMenuView";

  UsersMenuView.prototype.events = {
    "click .admin": "selectAdmin",
    "click .reader": "selectReader",
    "click #add_admin": "addAdmin",
    "click #remove_admin": "removeAdmin",
    "click #add_reader": "addReader",
    "click #remove_reader": "removeReader"
  };

  UsersMenuView.prototype.selectAdmin = function(event) {
    return this.$el.find("#selected_admin").val($(event.target).attr("data-name"));
  };

  UsersMenuView.prototype.selectReader = function(event) {
    return this.$el.find("#selected_reader").val($(event.target).attr("data-name"));
  };

  UsersMenuView.prototype.addAdmin = function() {
    var user;
    user = this.$el.find("#selected_admin").val();
    return this.useRobbert("add_admin", user);
  };

  UsersMenuView.prototype.removeAdmin = function() {
    var user;
    user = this.$el.find("#selected_admin").val();
    return this.useRobbert("remove_admin", user);
  };

  UsersMenuView.prototype.addReader = function() {
    var user;
    user = this.$el.find("#selected_reader").val();
    return this.useRobbert("add_reader", user);
  };

  UsersMenuView.prototype.removeReader = function() {
    var user;
    user = this.$el.find("#selected_reader").val();
    return this.useRobbert("remove_reader", user);
  };

  UsersMenuView.prototype.useRobbert = function(action, user) {
    return Utils.passwordPrompt((function(_this) {
      return function(auth_p) {
        return Robbert.request({
          "action": action,
          "user": user,
          "group": Tangerine.settings.get("groupName"),
          "auth_u": Tangerine.user.get("name"),
          "auth_p": auth_p,
          success: function(response) {
            Utils.midAlert(response.message);
            return Tangerine.user.fetch({
              success: function() {
                return _this.render();
              }
            });
          },
          error: function(error) {
            return Utils.midAlert("Server error\n\n" + error[1] + "\n" + error[2]);
          }
        });
      };
    })(this));
  };

  UsersMenuView.prototype.initialize = function() {};

  UsersMenuView.prototype.render = function() {
    var admin, adminOptions, admins, html, reader, readerOptions, readers;
    admins = Tangerine.user.dbAdmins;
    readers = Tangerine.user.dbReaders;
    adminOptions = ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = admins.length; i < len; i++) {
        admin = admins[i];
        results.push("<li data-name='" + (_.escape(admin)) + "' class='admin icon'>" + (_.escape(admin)) + "</li>");
      }
      return results;
    })()).join("");
    readerOptions = readers.length > 0 ? ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = readers.length; i < len; i++) {
        reader = readers[i];
        results.push("<li data-name='" + (_.escape(reader)) + "' class='reader icon'>" + (_.escape(reader)) + "</li>");
      }
      return results;
    })()).join("") : "<span class='grey'>No members yet.</span>";
    html = "<h1>Users</h1> <table> <tr> <th>Admins</th> <th>Members</th> </tr> <tr> <td> <input id='selected_admin'  value=''> <button id='add_admin' class='command'>+</button> <button id='remove_admin' class='command'>-</button> </td> <td> <input id='selected_reader' value=''> <button id='add_reader' class='command'>+</button> <button id='remove_reader' class='command'>-</button> </td> </tr> <tr> <td> <ul id='member_select' multiple='multiple' size='5'> " + adminOptions + " </ul> </td> <td> <ul id='reader_select' multiple='multiple' size='5'> " + readerOptions + " </ul> </td> </tr>";
    return this.$el.html(html);
  };

  return UsersMenuView;

})(Backbone.View);
