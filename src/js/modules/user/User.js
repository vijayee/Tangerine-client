// Generated by CoffeeScript 1.10.0
var User,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

User = (function(superClass) {
  extend(User, superClass);

  function User() {
    this.fetch = bind(this.fetch, this);
    this.sessionRefresh = bind(this.sessionRefresh, this);
    this.login = bind(this.login, this);
    this.signup = bind(this.signup, this);
    return User.__super__.constructor.apply(this, arguments);
  }

  User.prototype.url = 'user';

  User.prototype.initialize = function(options) {
    this.myRoles = [];
    this.dbAdmins = [];
    return this.myName = null;
  };


  /*
    Accessors
   */

  User.prototype.name = function() {
    return this.myName || null;
  };

  User.prototype.roles = function() {
    return this.myRoles || null;
  };

  User.prototype.recentUsers = function() {
    return ($.cookie("recentUsers") || '').split(",");
  };

  User.prototype.signup = function(name, pass) {
    Tangerine.log.app("User-signup", name);
    if (Tangerine.settings.get("context") === "server") {
      return $.ajax({
        url: Tangerine.config.get("robbert"),
        type: "POST",
        dataType: "json",
        data: {
          action: "new_user",
          auth_u: name,
          auth_p: pass
        },
        success: (function(_this) {
          return function(data) {
            if (_this.intent === "login") {
              _this.intent = "retry_login";
              return _this.login(name, pass);
            }
          };
        })(this)
      });
    } else {
      return $.couch.signup({
        name: name
      }, pass, {
        success: (function(_this) {
          return function(data) {
            if (_this.intent === "login" && Tangerine.settings.get("context") === "class" && name !== "admin") {
              return $.couch.login({
                name: name,
                password: pass,
                success: function(user) {
                  var view;
                  _this.intent = "";
                  _this.myName = name;
                  _this.myRoles = user.roles;
                  view = new RegisterTeacherView({
                    name: name,
                    pass: pass
                  });
                  vm.show(view);
                  return Tangerine.log.app("User-teacher-register", name);
                }
              });
            } else if (_this.intent === "login") {
              _this.intent = "retry_login";
              return _this.login(name, pass);
            }
          };
        })(this),
        error: (function(_this) {
          return function() {
            _this.intent = "";
            return _this.trigger("pass-error", t("LoginView.message.error_password_incorrect"));
          };
        })(this)
      });
    }
  };

  User.prototype.login = function(name, pass, callbacks) {
    if (callbacks == null) {
      callbacks = {};
    }
    Tangerine.log.app("User-login-attempt", name);
    return $.couch.login({
      name: name,
      password: pass,
      success: (function(_this) {
        return function(user) {
          _this.intent = "";
          _this.myName = name;
          _this.myRoles = user.roles;
          Tangerine.log.app("User-login-success", name);
          return _this.fetch({
            success: function() {
              var recentUsers;
              if (typeof callbacks.success === "function") {
                callbacks.success();
              }
              _this.trigger("login");
              recentUsers = _this.recentUsers().filter(function(a) {
                return !~a.indexOf(_this.name());
              });
              recentUsers.unshift(_this.name());
              if (recentUsers.length >= _this.RECENT_USER_MAX) {
                recentUsers.pop();
              }
              return $.cookie("recentUsers", recentUsers);
            }
          });
        };
      })(this),
      error: (function(_this) {
        return function(status, error, message) {
          if (_this.intent === "retry_login") {
            _this.intent = "";
            _this.trigger("pass-error", t("LoginView.message.error_password_incorrect"));
            return Tangerine.log.app("User-login-fail", name + " password incorrect");
          } else {
            _this.intent = "login";
            return _this.signup(name, pass);
          }
        };
      })(this)
    });
  };

  User.prototype.sessionRefresh = function(callbacks) {
    return $.couch.session({
      success: (function(_this) {
        return function(response) {
          if (response.userCtx.name != null) {
            _this.myName = response.userCtx.name;
            _this.myRoles = response.userCtx.roles;
            return _this.fetch({
              success: function() {
                _this.trigger("login");
                callbacks.success.apply(_this, arguments);
                return Tangerine.log.app("User-login", "Resumed session");
              }
            });
          } else {
            return callbacks.success.apply(_this, arguments);
          }
        };
      })(this),
      error: function() {
        return alert("Couch session error.\n\n" + (arguments.join("\n")));
      }
    });
  };

  User.prototype.verify = function(callbacks) {
    if (this.myName === null) {
      if ((callbacks != null ? callbacks.isUnregistered : void 0) != null) {
        return callbacks.isUnregistered();
      } else {
        return Tangerine.router.navigate("login", true);
      }
    } else {
      if (callbacks != null) {
        if (typeof callbacks.isAuthenticated === "function") {
          callbacks.isAuthenticated();
        }
      }
      if (this.isAdmin()) {
        return callbacks != null ? typeof callbacks.isAdmin === "function" ? callbacks.isAdmin() : void 0 : void 0;
      } else {
        return callbacks != null ? typeof callbacks.isUser === "function" ? callbacks.isUser() : void 0 : void 0;
      }
    }
  };

  User.prototype.isAdmin = function() {
    var ref;
    return (ref = this.myName, indexOf.call(this.dbAdmins, ref) >= 0) || indexOf.call(this.myRoles, "_admin") >= 0;
  };

  User.prototype.logout = function() {
    return $.couch.logout({
      success: (function(_this) {
        return function() {
          $.cookie("AuthSession", null);
          _this.myName = null;
          _this.myRoles = [];
          _this.clear();
          _this.trigger("logout");
          if (Tangerine.settings.get("context") === "server") {
            window.location = Tangerine.settings.urlIndex("trunk");
          } else {
            Tangerine.router.navigate("login", true);
          }
          return Tangerine.log.app("User-logout", "logout");
        };
      })(this)
    });
  };


  /*
    Saves to the `_users` database
    usage: either `@save("key", "value", options)` or `@save({"key":"value"}, options)`
    @override (Backbone.Model.save)
   */

  User.prototype.save = function(keyObject, valueOptions, options) {
    var attrs;
    attrs = {};
    if (_.isObject(keyObject)) {
      attrs = $.extend(attrs, keyObject);
      options = valueOptions;
    } else {
      attrs[keyObject] = value;
    }
    return $.couch.userDb((function(_this) {
      return function(db) {
        return db.saveDoc($.extend(_this.attributes, attrs), {
          success: function() {
            var ref;
            return (ref = options.success) != null ? ref.apply(_this, arguments) : void 0;
          }
        });
      };
    })(this));
  };


  /*
    Fetches user's doc from _users, loads into @attributes
   */

  User.prototype.fetch = function(callbacks) {
    if (callbacks == null) {
      callbacks = {};
    }
    return $.couch.userDb((function(_this) {
      return function(db) {
        return db.openDoc("org.couchdb.user:" + _this.myName, {
          success: function(userDoc) {
            return Tangerine.$db.openDoc("_security", {
              success: function(securityDoc) {
                var ref, ref1, ref2;
                _this.dbAdmins = (securityDoc != null ? (ref = securityDoc.admins) != null ? ref.names : void 0 : void 0) || [];
                _this.dbReaders = (securityDoc != null ? (ref1 = securityDoc.members) != null ? ref1.names : void 0 : void 0) || [];
                _this.dbReaders = _.filter(_this.dbReaders, function(a) {
                  return a.substr(0, 8) !== "uploader";
                });
                _this.set(userDoc);
                if ((ref2 = callbacks.success) != null) {
                  ref2.apply(_this, arguments);
                }
                return _this.trigger('group-refresh');
              }
            });
          },
          error: function() {
            var ref;
            return (ref = callbacks.error) != null ? ref.apply(_this, arguments) : void 0;
          }
        });
      };
    })(this));
  };


  /*
  
  Groups
   */

  User.prototype.joinGroup = function(group, callback) {
    if (callback == null) {
      callback = {};
    }
    Utils.working(true);
    return Utils.passwordPrompt((function(_this) {
      return function(auth_p) {
        return Robbert.request({
          action: "new_group",
          group: group,
          auth_u: Tangerine.user.get("name"),
          auth_p: auth_p,
          success: function(response) {
            Utils.working(false);
            if (response.status === "success") {
              _this.login(_this.get("name"), auth_p, {
                success: callback
              });
              _this.trigger("group-join");
            }
            return Utils.midAlert(response.message);
          },
          error: function(error) {
            Utils.working(false);
            Utils.midAlert("Error creating group\n\n" + error[1] + "\n" + error[2]);
            return _this.fetch({
              success: callback
            });
          }
        });
      };
    })(this));
  };

  User.prototype.leaveGroup = function(group, callback) {
    if (callback == null) {
      callback = {};
    }
    Utils.working(true);
    return Utils.passwordPrompt((function(_this) {
      return function(auth_p) {
        return Robbert.request({
          action: "leave_group",
          user: _this.get("name"),
          group: group,
          auth_u: Tangerine.user.get("name"),
          auth_p: auth_p,
          success: function(response) {
            Utils.working(false);
            _this.login(_this.get("name"), auth_p, {
              success: callback
            });
            if (response.status === "success") {
              _this.trigger("group-leave");
            }
            return Utils.midAlert(response.message);
          },
          error: function(response) {
            Utils.working(false);
            Utils.midAlert(response.message);
            return typeof callback.error === "function" ? callback.error(response) : void 0;
          }
        });
      };
    })(this));
  };

  User.prototype.ghostLogin = function(user, pass) {
    var location;
    Tangerine.log.db("User", "ghostLogin");
    location = encodeURIComponent(window.location.toString());
    return document.location = Tangerine.settings.location.group.url.replace(/\:\/\/.*@/, '://') + ("_ghost/" + user + "/" + pass + "/" + location);
  };

  return User;

})(Backbone.Model);
