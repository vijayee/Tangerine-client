// Generated by CoffeeScript 1.10.0
var TeachersView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TeachersView = (function(superClass) {
  extend(TeachersView, superClass);

  function TeachersView() {
    return TeachersView.__super__.constructor.apply(this, arguments);
  }

  TeachersView.prototype.className = "TeachersView";

  TeachersView.prototype.events = {
    "click .edit_in_place": "editInPlace",
    "focusout .editing": "editing",
    "keyup    .editing": "editing",
    "keydown  .editing": "editing",
    'click    .change_password': "changePassword",
    'change   .show_password': "showPassword",
    'click    .save_password': 'savePassword',
    'click    .back': 'goBack'
  };

  TeachersView.prototype.goBack = function() {
    return window.history.back();
  };

  TeachersView.prototype.initialize = function(options) {
    this.teachers = options.teachers;
    this.users = options.users;
    this.usersByTeacherId = this.users.indexBy("teacherId");
    return this.teacherProperties = [
      {
        "key": "name",
        "editable": true,
        "headerless": true
      }, {
        "key": "first",
        "label": "First",
        "editable": true,
        "escaped": true
      }, {
        "key": "last",
        "label": "Last",
        "editable": true,
        "escaped": true
      }, {
        "key": "gender",
        "label": "Gender",
        "editable": true
      }, {
        "key": "school",
        "label": "School name",
        "editable": true
      }, {
        "key": "contact",
        "label": "Contact Information",
        "editable": true
      }
    ];
  };

  TeachersView.prototype.showPassword = function(event) {
    var $target, teacherId;
    $target = $(event.target);
    teacherId = $target.attr("data-teacherId");
    if (this.$el.find("." + teacherId + "_password").attr("type") === "password") {
      return this.$el.find("." + teacherId + "_password").attr("type", "text");
    } else {
      return this.$el.find("." + teacherId + "_password").attr("type", "password");
    }
  };

  TeachersView.prototype.changePassword = function(event) {
    var $target, teacherId;
    $target = $(event.target);
    teacherId = $target.attr("data-teacherId");
    this.$el.find("." + teacherId + "_menu").toggleClass("confirmation");
    this.$el.find("." + teacherId).scrollTo();
    return this.$el.find("." + teacherId + "_password").focus();
  };

  TeachersView.prototype.savePassword = function(event) {
    var $target, teacherId, teacherModel, userModel;
    $target = $(event.target);
    teacherId = $target.attr("data-teacherId");
    teacherModel = this.teachers.get(teacherId);
    userModel = this.usersByTeacherId[teacherId][0];
    userModel.setPassword(this.$el.find("." + teacherId + "_password").val());
    return userModel.save(null, {
      success: (function(_this) {
        return function() {
          Utils.midAlert("Teacher's password saved");
          _this.$el.find("." + teacherId + "_password").val("");
          return _this.$el.find("." + teacherId + "_menu").toggleClass("confirmation");
        };
      })(this),
      error: (function(_this) {
        return function() {
          return Utils.midAlert("Save error");
        };
      })(this)
    });
  };

  TeachersView.prototype.render = function() {
    var backButton, deleteButton, html, teacherTable;
    teacherTable = this.getTeacherTable();
    deleteButton = Tangerine.settings.get("context") === "server" ? "<button class='command_red delete'>Delete</button>" : "";
    if (Tangerine.settings.get("context") !== "server") {
      backButton = "<button class='navigation back'>" + (t('back')) + "</button>";
    }
    html = (backButton || '') + " <h1>Teachers</h1> <div id='teacher_table_container'> " + teacherTable + " </div>";
    this.$el.html(html);
    return this.trigger("rendered");
  };

  TeachersView.prototype.updateTable = function() {
    return this.$el.find("#teacher_table_container").html(this.getTeacherTable());
  };

  TeachersView.prototype.getTeacherTable = function() {
    var html, i, j, len, len1, prop, ref, ref1, teacher;
    html = "";
    ref = this.teachers.models;
    for (i = 0, len = ref.length; i < len; i++) {
      teacher = ref[i];
      html += "<table class='class_table teachers " + teacher.id + "' > <tbody>";
      ref1 = this.teacherProperties;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        prop = ref1[j];
        html += this.propCookRow(prop, teacher);
      }
      html += "<tr class='last'><th><button class='change_password command' data-teacherId='" + teacher.id + "'>Change Password</button><br> <div class='" + teacher.id + "_menu confirmation'> <div class='menu_box'> <input type='password' class='" + teacher.id + "_password'> <table><tr> <th style='padding:0;'><label for='" + teacher.id + "_show_password'>Show password</label></th> <th style='padding:10px'><input type='checkbox' id='" + teacher.id + "_show_password' class='show_password' data-teacherId='" + teacher.id + "'></th> </tr></table> <button class='save_password command' data-teacherId='" + teacher.id + "'>Save</button> </div> </div> </th> </tr> </tbody> </table>";
    }
    return html;
  };

  TeachersView.prototype.propCookRow = function(prop, teacher) {
    var header;
    if (prop.headerless) {
      prop.tagName = "th";
    } else {
      header = "<th>" + prop.label + "</th>";
    }
    return "<tr>" + (header || "") + (this.propCook(prop, teacher)) + "</tr>";
  };

  TeachersView.prototype.propCook = function(prop, teacher) {
    var editOrNot, numberOrNot, tagName, value;
    value = prop.key != null ? teacher.get(prop.key) : "&nbsp;";
    value = prop.escape ? teacher.escape(prop.key) : value;
    if (value == null) {
      value = "_";
    }
    tagName = prop.tagName || "td";
    editOrNot = prop.editable ? "edit_in_place" : "";
    numberOrNot = _.isNumber(value) ? "data-isNumber='true'" : "data-isNumber='false'";
    return "<" + tagName + " class='" + editOrNot + "'><span data-teacherId='" + teacher.id + "' data-key='" + prop.key + "' data-value='" + value + "' " + editOrNot + " " + numberOrNot + ">" + value + "</div></" + tagName + ">";
  };

  TeachersView.prototype.editInPlace = function(event) {
    var $span, $target, $td, $textarea, classes, guid, isNumber, key, margins, oldValue, teacher, teacherId, transferVariables;
    if (this.alreadyEditing) {
      return;
    }
    this.alreadyEditing = true;
    $span = $(event.target);
    if ($span.prop("tagName") === "TD") {
      $span = $span.find("span");
      if ($span.length === 0) {
        return;
      }
    }
    $td = $span.parent();
    this.$oldSpan = $span.clone();
    if ($span.prop("tagName") === "TEXTAREA") {
      return;
    }
    guid = Utils.guid();
    key = $span.attr("data-key");
    isNumber = $span.attr("data-isNumber") === "true";
    teacherId = $span.attr("data-teacherId");
    teacher = this.teachers.get(teacherId);
    oldValue = isNumber ? teacher.getNumber(key) : teacher.getString(key);
    $target = $(event.target);
    classes = ($target.attr("class") || "").replace("settings", "");
    margins = $target.css("margin");
    if (key === 'items') {
      oldValue = oldValue.join(" ");
    }
    transferVariables = "data-isNumber='" + isNumber + "' data-key='" + key + "' data-teacherId='" + teacherId + "' ";
    $td.html("<textarea id='" + guid + "' " + transferVariables + " class='editing " + classes + "' style='margin:" + margins + "'>" + oldValue + "</textarea>");
    $textarea = $("#" + guid);
    return $textarea.focus();
  };

  TeachersView.prototype.editing = function(event) {
    var $target, $td, attributes, isNumber, key, newValue, oldValue, teacher, teacherId;
    $target = $(event.target);
    $td = $target.parent();
    if (event.which === 27 || event.type === "focusout") {
      $target.remove();
      $td.html(this.$oldSpan);
      this.alreadyEditing = false;
      return;
    }
    if (!(event.which === 13 && event.type === "keydown")) {
      return true;
    }
    this.alreadyEditing = false;
    key = $target.attr("data-key");
    isNumber = $target.attr("data-isNumber") === "true";
    teacherId = $target.attr("data-teacherId");
    teacher = this.teachers.get(teacherId);
    oldValue = teacher.get(key);
    newValue = $target.val();
    newValue = isNumber ? parseInt(newValue) : newValue;
    if (key === "items") {
      newValue = newValue.replace(/\s+/g, ' ');
      if (/\t|,/.test(newValue)) {
        alert("Please remember\n\nGrid items are space \" \" delimited");
      }
      newValue = _.compact(newValue.split(" "));
    }
    if (String(newValue) !== String(oldValue)) {
      attributes = {};
      attributes[key] = newValue;
      teacher.save(attributes, {
        success: (function(_this) {
          return function() {
            Utils.topAlert("Teacher saved");
            return teacher.fetch({
              success: function() {
                return _this.updateTable();
              }
            });
          };
        })(this),
        error: (function(_this) {
          return function() {
            return teacher.fetch({
              success: function() {
                _this.updateTable();
                return alert("Please try to save again, it didn't work that time.");
              }
            });
          };
        })(this)
      });
    }
    return false;
  };

  return TeachersView;

})(Backbone.View);
