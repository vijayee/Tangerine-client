// Generated by CoffeeScript 1.10.0
var IdRunView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

IdRunView = (function(superClass) {
  extend(IdRunView, superClass);

  function IdRunView() {
    return IdRunView.__super__.constructor.apply(this, arguments);
  }

  IdRunView.prototype.className = "id";

  IdRunView.prototype.events = {
    'click #generate': 'generate',
    'change #participant_id': 'setValidator'
  };

  IdRunView.prototype.i18n = function() {
    return this.text = {
      identifier: t("IdRunView.label.identifier"),
      generate: t("IdRunView.button.generate")
    };
  };

  IdRunView.prototype.initialize = function(options) {
    console.log(options);
    this.i18n();
    this.model = options.model;
    this.parent = options.parent;
    this.dataEntry = options.dataEntry;
    return this.validator = new CheckDigit;
  };

  IdRunView.prototype.render = function() {
    var participantId, previous;
    if (!this.dataEntry) {
      previous = this.parent.parent.result.getByHash(this.model.get('hash'));
      if (previous) {
        participantId = previous.participant_id;
      }
    }
    this.$el.html("<form> <label for='participant_id'>" + this.text.identifier + "</label> <input id='participant_id' name='participant_id' value='" + (participantId || '') + "'> <button id='generate' class='command'>" + this.text.generate + "</button> <div class='messages'></div> </form>");
    this.trigger("rendered");
    return this.trigger("ready");
  };

  IdRunView.prototype.getResult = function() {
    return {
      'participant_id': this.$el.find("#participant_id").val()
    };
  };

  IdRunView.prototype.getSkipped = function() {
    return {
      'participant_id': "skipped"
    };
  };

  IdRunView.prototype.setValidator = function() {
    return this.validator.set(this.getResult()['participant_id']);
  };

  IdRunView.prototype.isValid = function() {
    this.setValidator();
    if (!this.validator.isValid()) {
      return false;
    }
    return this.updateNavigation();
  };

  IdRunView.prototype.showErrors = function() {
    return this.$el.find(".messages").html(this.validator.getErrors().join(", "));
  };

  IdRunView.prototype.generate = function() {
    this.$el.find(".messages").empty();
    this.$el.find('#participant_id').val(this.validator.generate());
    return false;
  };

  IdRunView.prototype.updateNavigation = function() {
    return Tangerine.nav.setStudent(this.getResult()['participant_id']);
  };

  return IdRunView;

})(Backbone.View);
