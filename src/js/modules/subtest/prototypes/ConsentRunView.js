// Generated by CoffeeScript 1.10.0
var ConsentRunView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ConsentRunView = (function(superClass) {
  extend(ConsentRunView, superClass);

  function ConsentRunView() {
    this.onConsentChange = bind(this.onConsentChange, this);
    return ConsentRunView.__super__.constructor.apply(this, arguments);
  }

  ConsentRunView.prototype.className = "ConsentRunView";

  ConsentRunView.prototype.events = {
    'click #non_consent_confirm': 'noConsent'
  };

  ConsentRunView.prototype.onConsentChange = function() {
    if (this.consentButton.answer === "yes") {
      return this.clearMessages();
    } else {
      return this.showNonConsent();
    }
  };

  ConsentRunView.prototype.i18n = function() {
    return this.text = {
      defaultConsent: t("ConsentRunView.label.default_consent_prompt"),
      confirmNonconsent: t("ConsentRunView.label.confirm_nonconsent"),
      confirm: t("ConsentRunView.button.confirm"),
      yes: t("ConsentRunView.button.yes_continue"),
      no: t("ConsentRunView.button.no_stop"),
      select: t("ConsentRunView.message.select")
    };
  };

  ConsentRunView.prototype.initialize = function(options) {
    this.i18n();
    this.confirmedNonConsent = false;
    this.model = this.options.model;
    this.parent = this.options.parent;
    return this.dataEntry = this.options.dataEntry;
  };

  ConsentRunView.prototype.render = function() {
    var answer, previous;
    this.$el.html("<div class='question'> <label>" + (this.model.get('prompt') || this.text.defaultConsent) + "</label> <div class='messages'></div> <div class='non_consent_form confirmation'> <div>" + this.text.confirmNonconsent + "</div> <button id='non_consent_confirm' class='command'>" + this.text.confirm + "</button> </div> <div class='consent-button'></div> </div>");
    if (!this.dataEntry) {
      previous = this.parent.parent.result.getByHash(this.model.get('hash'));
      if (previous) {
        answer = previous.consent;
      }
    }
    this.consentButton = new ButtonView({
      options: [
        {
          label: this.text.yes,
          value: "yes"
        }, {
          label: this.text.no,
          value: "no"
        }
      ],
      mode: "single",
      dataEntry: false,
      answer: answer || ""
    });
    this.consentButton.setElement(this.$el.find(".consent-button"));
    this.consentButton.on("change", this.onConsentChange);
    this.consentButton.render();
    this.trigger("rendered");
    return this.trigger("ready");
  };

  ConsentRunView.prototype.isValid = function() {
    if (this.confirmedNonConsent === false) {
      if (this.consentButton.answer === "yes") {
        return true;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };

  ConsentRunView.prototype.showNonConsent = function() {
    return this.$el.find(".non_consent_form").show(250);
  };

  ConsentRunView.prototype.clearMessages = function() {
    this.$el.find(".non_consent_form").hide(250);
    return this.$el.find(".messages").html("");
  };

  ConsentRunView.prototype.noConsent = function() {
    this.confirmedNonConsent = true;
    this.parent.abort();
    return false;
  };

  ConsentRunView.prototype.getSkipped = function() {
    return {
      "consent": "skipped"
    };
  };

  ConsentRunView.prototype.showErrors = function() {
    var answer;
    answer = this.consentButton.answer;
    if (answer === "no") {
      Utils.midAlert(this.text.confirm);
      return this.showNonConsent();
    } else if (answer === void 0) {
      return $(".messages").html(this.text.select);
    }
  };

  ConsentRunView.prototype.getResult = function() {
    return {
      "consent": this.consentButton.answer
    };
  };

  ConsentRunView.prototype.onClose = function() {
    var ref;
    return (ref = this.consentButton) != null ? typeof ref.close === "function" ? ref.close() : void 0 : void 0;
  };

  return ConsentRunView;

})(Backbone.View);
