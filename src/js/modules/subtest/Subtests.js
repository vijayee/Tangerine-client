// Generated by CoffeeScript 1.10.0
var Subtests,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Subtests = (function(superClass) {
  extend(Subtests, superClass);

  function Subtests() {
    return Subtests.__super__.constructor.apply(this, arguments);
  }

  Subtests.prototype.model = Subtest;

  Subtests.prototype.pouch = {
    viewOptions: {
      key: 'subtest'
    }
  };

  Subtests.prototype.comparator = function(subtest) {
    if (subtest.has("curriculumId")) {
      return (parseInt(subtest.get("part")) * 100) + parseInt(subtest.get("order"));
    } else {
      return parseInt(subtest.get("order"));
    }
  };

  Subtests.prototype.ensureOrder = function() {
    var i, j, len, model, ordered, ref, results, subtest, test;
    test = ((function() {
      var j, len, ref, results;
      ref = this.models;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        model = ref[j];
        results.push(model.get("order"));
      }
      return results;
    }).call(this)).join("");
    ordered = ((function() {
      var j, len, ref, results;
      ref = this.models;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        model = ref[i];
        results.push(i);
      }
      return results;
    }).call(this)).join("");
    if (test !== ordered) {
      ref = this.models;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        subtest = ref[i];
        subtest.set("order", i);
        results.push(subtest.save());
      }
      return results;
    }
  };

  return Subtests;

})(Backbone.Collection);
