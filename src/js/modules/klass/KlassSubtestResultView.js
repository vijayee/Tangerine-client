// Generated by CoffeeScript 1.10.0
var KlassSubtestResultView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KlassSubtestResultView = (function(superClass) {
  extend(KlassSubtestResultView, superClass);

  function KlassSubtestResultView() {
    return KlassSubtestResultView.__super__.constructor.apply(this, arguments);
  }

  KlassSubtestResultView.prototype.className = "KlassSubtestResultView";

  KlassSubtestResultView.prototype.events = {
    "click .run": "checkRun",
    "click .back": "back",
    "click .show_itemized": "showItemized"
  };

  KlassSubtestResultView.prototype.initialize = function(options) {
    this.allResults = options.allResults;
    this.results = options.results;
    this.result = this.results[0];
    this.previous = options.previous;
    this.subtest = options.subtest;
    return this.student = options.student;
  };

  KlassSubtestResultView.prototype.gotoRun = function() {
    return Tangerine.router.navigate("class/run/" + this.options.student.id + "/" + this.options.subtest.id, true);
  };

  KlassSubtestResultView.prototype.checkRun = function() {
    var gridLinkId, hasGridLink, result, subtest;
    hasGridLink = this.subtest.has("gridLinkId") && this.subtest.get("gridLinkId") !== "";
    if (!hasGridLink) {
      this.gotoRun();
      return;
    }
    gridLinkId = this.subtest.get("gridLinkId");
    result = this.allResults.where({
      "subtestId": gridLinkId,
      "studentId": this.student.id
    });
    if (result.length === 0) {
      subtest = new Subtest({
        "_id": gridLinkId
      });
      subtest.fetch({
        success: (function(_this) {
          return function() {
            return Utils.midAlert("Please complete<br><b>" + (subtest.escape("name")) + "</b><br>for<br><b>" + (_this.student.escape('name')) + "</b><br>before this test.", 5000);
          };
        })(this)
      });
      return;
    }
    return this.gotoRun();
  };

  KlassSubtestResultView.prototype.showItemized = function() {
    return this.$el.find(".itemized").fadeToggle();
  };

  KlassSubtestResultView.prototype.back = function() {
    return Tangerine.router.navigate("class/" + (this.options.student.get("klassId")) + "/" + (this.options.subtest.get("part")), true);
  };

  KlassSubtestResultView.prototype.render = function() {
    var base, datum, i, j, key, len, ref, ref1, resultHTML, runButton, taken, timestamp, value;
    if (this.result != null) {
      this.results = this.results[0];
      resultHTML = "<button class='command show_itemized'>" + (t('itemized results')) + "</button><table class='itemized confirmation'><tbody><tr><th>Item</th><th>Result</th></tr>";
      if (this.subtest.get("prototype") === "grid") {
        ref = this.result.get("subtestData").items;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          datum = ref[i];
          resultHTML += "<tr><td>" + datum.itemLabel + "</td><td>" + (t(datum.itemResult)) + "</td></tr>";
        }
      } else if (this.subtest.get("prototype") === "survey") {
        ref1 = this.result.get("subtestData");
        for (key in ref1) {
          value = ref1[key];
          resultHTML += "<tr><td>" + key + "</td><td>" + (t(value)) + "</td></tr>";
        }
      }
      resultHTML += "</tbody></table><br>";
      timestamp = new Date(this.result.get("startTime"));
      if (this.previous > 0) {
        taken = "<tr> <td><label>Taken last</label></td><td>" + (timestamp.getFullYear()) + "/" + (timestamp.getMonth() + 1) + "/" + (timestamp.getDate()) + "</td> </tr> <tr> <td><label>Previous attempts</label></td><td>" + this.previous + "</td> </tr>";
      }
    }
    if ((this.result == null) || (typeof (base = this.result).get === "function" ? base.get("reportType") : void 0) !== "progress") {
      runButton = "<div class='menu_box'> <img src='images/icon_run.png' class='run clickable'> </div><br>";
    }
    this.$el.html("<h1>Result</h1> <table><tbody> <tr> <td><label>Assessment</label></td> <td>" + (this.subtest.get("part")) + "</td> </tr> <tr> <td><label>Student</label></td> <td>" + (this.student.escape("name")) + "</td> </tr> <tr> <td><label>Subtest</label></td> <td>" + (this.subtest.escape("name")) + "</td> </tr> " + (taken || "") + " </tbody></table> " + (resultHTML || "") + " " + (runButton || "") + " <button class='navigation back'>Back</button>");
    return this.trigger("rendered");
  };

  return KlassSubtestResultView;

})(Backbone.View);
