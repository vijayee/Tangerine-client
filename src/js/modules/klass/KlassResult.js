// Generated by CoffeeScript 1.10.0
var KlassResult,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KlassResult = (function(superClass) {
  extend(KlassResult, superClass);

  function KlassResult() {
    return KlassResult.__super__.constructor.apply(this, arguments);
  }

  KlassResult.prototype.url = "result";

  KlassResult.prototype.add = function(subtestDataElement, callback) {
    return this.save({
      'subtestData': subtestDataElement
    }, {
      success: (function(_this) {
        return function() {
          return callback();
        };
      })(this)
    });
  };

  KlassResult.prototype.getItemized = function(options) {
    var itemized, key, ref, value;
    if (this.attributes.prototype === "grid") {
      itemized = this.attributes.subtestData.items;
    } else if (this.attributes.prototype === "survey") {
      itemized = [];
      ref = this.attributes.subtestData;
      for (key in ref) {
        value = ref[key];
        itemized.push({
          itemLabel: key,
          itemResult: value
        });
      }
    }
    return itemized;
  };

  KlassResult.prototype.get = function(options) {
    if (options === "correct") {
      return this.gridCount(["correct", 1]);
    }
    if (options === "incorrect") {
      return this.gridCount(["incorrect", 0]);
    }
    if (options === "missing") {
      return this.gridCount(["missing", 9]);
    }
    if (options === "total") {
      if (this.attributes.prototype === "grid") {
        return this.attributes.subtestData.items.length;
      } else if (this.attributes.prototype === "survey") {
        return _.keys(this.attributes.subtestData).length;
      }
    }
    if (options === "attempted") {
      return this.getAttempted();
    }
    if (options === "time_remain") {
      return this.getTimeRemain();
    }
    return KlassResult.__super__.get.call(this, options);
  };

  KlassResult.prototype.gridCount = function(value) {
    var count, i, item, j, k, len, len1, ref, ref1, ref2, ref3, v;
    count = 0;
    if (this.attributes.prototype === "grid") {
      if (_.isArray(value)) {
        ref = this.get("subtestData").items;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (~value.indexOf(item.itemResult)) {
            count++;
          }
        }
      } else {
        ref1 = this.get("subtestData").items;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          item = ref1[j];
          if (item.itemResult === value) {
            count++;
          }
        }
      }
    } else if (this.attributes.prototype === "survey") {
      if (_.isArray(value)) {
        ref2 = this.attributes.subtestData;
        for (k in ref2) {
          v = ref2[k];
          if (~value.indexOf(v) || ~value.indexOf(parseInt(v))) {
            count++;
          }
        }
      } else {
        ref3 = this.attributes.subtestData;
        for (k in ref3) {
          v = ref3[k];
          if (value === v || value === parseInt(v)) {
            count++;
          }
        }
      }
    }
    return count;
  };

  KlassResult.prototype.getAttempted = function() {
    return parseInt(this.get("subtestData").attempted);
  };

  KlassResult.prototype.getTimeRemain = function() {
    return parseInt(this.get("subtestData").time_remain);
  };

  KlassResult.prototype.getCorrectPerSeconds = function(secondsAllowed) {
    return Math.round((this.get("correct") / (secondsAllowed - this.getTimeRemain())) * secondsAllowed);
  };

  return KlassResult;

})(Backbone.Model);
