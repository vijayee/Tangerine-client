// Generated by CoffeeScript 1.10.0
var KlassesView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KlassesView = (function(superClass) {
  extend(KlassesView, superClass);

  function KlassesView() {
    this.render = bind(this.render, this);
    this.onSubviewRendered = bind(this.onSubviewRendered, this);
    this.updatePullResult = bind(this.updatePullResult, this);
    this.updatePull = bind(this.updatePull, this);
    this.updateUploader = bind(this.updateUploader, this);
    return KlassesView.__super__.constructor.apply(this, arguments);
  }

  KlassesView.prototype.className = "KlassesView";

  KlassesView.prototype.events = {
    'click .klass_add': 'toggleAddForm',
    'click .klass_cancel': 'toggleAddForm',
    'click .klass_save': 'saveNewKlass',
    'click .klass_curricula': 'gotoCurricula',
    'click .goto_class': 'gotoKlass',
    'click .pull_data': 'pullData',
    'click .verify': 'ghostLogin',
    'click .upload_data': 'uploadData'
  };

  KlassesView.prototype.initialize = function(options) {
    var verReq;
    this.ipBlock = 32;
    this.totalIps = 256;
    this.tabletOffset = 0;
    this.views = [];
    this.klasses = options.klasses;
    this.curricula = options.curricula;
    this.teachers = options.teachers;
    this.klasses.on("add remove change", this.render);
    if (Tangerine.user.isAdmin()) {
      this.timer = setTimeout((function(_this) {
        return function() {
          return _this.updateUploader(false);
        };
      })(this), 20 * 1000);
      return verReq = $.ajax({
        url: Tangerine.settings.urlView("group", "byDKey"),
        dataType: "jsonp",
        data: {
          keys: ["testtest"]
        },
        timeout: 5000,
        success: (function(_this) {
          return function() {
            clearTimeout(_this.timer);
            return _this.updateUploader(true);
          };
        })(this)
      });
    }
  };

  KlassesView.prototype.ghostLogin = function() {
    return Tangerine.user.ghostLogin(Tangerine.settings.upUser, Tangerine.settings.upPass);
  };

  KlassesView.prototype.uploadData = function() {
    return $.ajax({
      "url": "/" + Tangerine.db_name + "/_design/tangerine/_view/byCollection?include_docs=false",
      "type": "POST",
      "dataType": "json",
      "contentType": "application/json;charset=utf-8",
      "data": JSON.stringify({
        include_docs: false,
        keys: ['result', 'klass', 'student', 'teacher', 'logs', 'user']
      }),
      "success": (function(_this) {
        return function(data) {
          var docList;
          docList = _.pluck(data.rows, "id");
          return $.couch.replicate(Tangerine.settings.urlDB("local"), Tangerine.settings.urlDB("group"), {
            success: function() {
              return Utils.midAlert("Sync successful");
            },
            error: function(a, b) {
              return Utils.midAlert("Sync error<br>" + a + " " + b);
            }
          }, {
            doc_ids: docList
          });
        };
      })(this)
    });
  };

  KlassesView.prototype.updateUploader = function(status) {
    var html;
    html = status === true ? "<button class='upload_data command'>Upload</button>" : status === false ? "<div class='menu_box'><small>No connection</small><br><button class='command verify'>Verify connection</button></div>" : "<button class='command' disabled='disabled'>Verifying connection...</button>";
    return this.$el.find(".uploader").html(html);
  };

  KlassesView.prototype.pullData = function() {
    if (this.tabletOffset === 0) {
      this.tablets = {
        checked: 0,
        complete: 0,
        successful: 0,
        okCount: 0,
        ips: [],
        result: 0
      };
      Utils.midAlert("Please wait, detecting tablets.");
    }
    Utils.working(true);
    this.randomIdDoc = hex_sha1("" + Math.random());
    return Tangerine.$db.saveDoc({
      "_id": this.randomIdDoc
    }, {
      success: (function(_this) {
        return function(doc) {
          var i, local, ref, ref1, results;
          _this.randomDoc = doc;
          results = [];
          for (local = i = ref = _this.tabletOffset, ref1 = (_this.ipBlock - 1) + _this.tabletOffset; ref <= ref1 ? i <= ref1 : i >= ref1; local = ref <= ref1 ? ++i : --i) {
            results.push((function(local) {
              var ip, req;
              ip = Tangerine.settings.subnetIP(local);
              req = $.ajax({
                url: Tangerine.settings.urlSubnet(ip),
                dataType: "jsonp",
                contentType: "application/json;charset=utf-8",
                timeout: 10000
              });
              return req.complete(function(xhr, error) {
                _this.tablets.checked++;
                if (parseInt(xhr.status) === 200) {
                  _this.tablets.okCount++;
                  _this.tablets.ips.push(ip);
                }
                return _this.updatePull();
              });
            })(local));
          }
          return results;
        };
      })(this),
      error: function() {
        Utils.working(false);
        return Utils.midAlert("Internal database error");
      }
    });
  };

  KlassesView.prototype.updatePull = function() {
    var i, ip, len, ref, results;
    if (this.tablets.checked < this.ipBlock + this.tabletOffset) {
      return;
    }
    if (this.tabletOffset !== this.totalIps - this.ipBlock) {
      this.tabletOffset += this.ipBlock;
      return this.pullData();
    } else {
      this.tablets.okCount = Math.max(this.tablets.okCount - 1, 0);
      if (this.tablets.okCount === 0) {
        this.tabletOffset = 0;
        Utils.working(false);
        Utils.midAlert(this.tablets.okCount + " tablets found.");
        Tangerine.$db.removeDoc({
          "_id": this.randomDoc.id,
          "_rev": this.randomDoc.rev
        });
        return;
      }
      if (!confirm(this.tablets.okCount + " tablets found.\n\nStart data pull?")) {
        this.tabletOffset = 0;
        Utils.working(false);
        Tangerine.$db.removeDoc({
          "_id": this.randomDoc.id,
          "_rev": this.randomDoc.rev
        });
        return;
      }
      Utils.midAlert("Pulling from " + this.tablets.okCount + " tablets.");
      ref = this.tablets.ips;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        ip = ref[i];
        results.push((function(_this) {
          return function(ip) {
            var selfReq;
            selfReq = $.ajax({
              "url": Tangerine.settings.urlSubnet(ip) + "/" + _this.randomIdDoc,
              "dataType": "jsonp",
              "timeout": 10000,
              "contentType": "application/json;charset=utf-8"
            });
            selfReq.success(function(data, xhr, error) {});
            return selfReq.complete(function(xhr, error) {
              return (function(xhr) {
                var viewReq;
                if (parseInt(xhr.status) === 200) {
                  return;
                }
                viewReq = $.ajax({
                  "url": Tangerine.settings.urlSubnet(ip) + "/_design/tangerine/_view/byCollection",
                  "dataType": "jsonp",
                  "contentType": "application/json;charset=utf-8",
                  "data": {
                    include_docs: false,
                    keys: JSON.stringify(['result', 'klass', 'student', 'curriculum', 'teacher', 'logs'])
                  }
                });
                return viewReq.success(function(data) {
                  var datum, docList;
                  docList = (function() {
                    var j, len1, ref1, results1;
                    ref1 = data.rows;
                    results1 = [];
                    for (j = 0, len1 = ref1.length; j < len1; j++) {
                      datum = ref1[j];
                      results1.push(datum.id);
                    }
                    return results1;
                  })();
                  return $.couch.replicate(Tangerine.settings.urlSubnet(ip), Tangerine.settings.urlDB("local"), {
                    success: function() {
                      _this.tablets.complete++;
                      _this.tablets.successful++;
                      return _this.updatePullResult();
                    },
                    error: function(a, b) {
                      _this.tablets.complete++;
                      return _this.updatePullResult();
                    }
                  }, {
                    doc_ids: docList
                  });
                });
              })(xhr);
            });
          };
        })(this)(ip));
      }
      return results;
    }
  };

  KlassesView.prototype.updatePullResult = function() {
    if (this.tablets.complete === this.tablets.okCount) {
      Utils.working(false);
      Utils.midAlert("Pull finished.<br>" + this.tablets.successful + " out of " + this.tablets.okCount + " successful.", 5000);
      Tangerine.$db.removeDoc({
        "_id": this.randomDoc.id,
        "_rev": this.randomDoc.rev
      });
      return this.klasses.fetch({
        success: (function(_this) {
          return function() {
            return _this.renderKlasses();
          };
        })(this)
      });
    }
  };

  KlassesView.prototype.gotoCurricula = function() {
    return Tangerine.router.navigate("curricula", true);
  };

  KlassesView.prototype.saveNewKlass = function() {
    var curriculum, errors, grade, i, klass, len, ref, schoolName, stream, teacherId, year;
    schoolName = $.trim(this.$el.find("#school_name").val());
    year = $.trim(this.$el.find("#year").val());
    grade = $.trim(this.$el.find("#grade").val());
    stream = $.trim(this.$el.find("#stream").val());
    curriculum = this.$el.find("#curriculum option:selected").attr("data-id");
    errors = [];
    if (schoolName === "") {
      errors.push(" - No school name.");
    }
    if (year === "") {
      errors.push(" - No year.");
    }
    if (grade === "") {
      errors.push(" - No grade.");
    }
    if (stream === "") {
      errors.push(" - No stream.");
    }
    if (curriculum === "_none") {
      errors.push(" - No curriculum selected.");
    }
    ref = this.klasses.models;
    for (i = 0, len = ref.length; i < len; i++) {
      klass = ref[i];
      if (klass.get("year") === year && klass.get("grade") === grade && klass.get("stream") === stream) {
        errors.push(" - Duplicate year, grade, stream.");
      }
    }
    if (errors.length === 0) {
      teacherId = Tangerine.user.has("teacherId") ? Tangerine.user.get("teacherId") : "admin";
      klass = new Klass;
      return klass.save({
        teacherId: teacherId,
        schoolName: schoolName,
        year: year,
        grade: grade,
        stream: stream,
        curriculumId: this.$el.find("#curriculum option:selected").attr("data-id"),
        startDate: (new Date()).getTime()
      }, {
        success: (function(_this) {
          return function() {
            return _this.klasses.add(klass);
          };
        })(this)
      });
    } else {
      return alert("Please correct the following errors:\n\n" + (errors.join('\n')));
    }
  };

  KlassesView.prototype.gotoKlass = function(event) {
    return Tangerine.router.navigate("class/edit/" + $(event.target).attr("data-id"));
  };

  KlassesView.prototype.toggleAddForm = function() {
    var schoolName;
    this.$el.find("#add_form, .add").toggle();
    if (!Tangerine.user.isAdmin()) {
      schoolName = this.teachers.get(Tangerine.user.get("teacherId")).get("school");
      this.$el.find("#school_name").val(schoolName);
      this.$el.find("#year").focus();
    } else {
      this.$el.find("#school_name").focus();
    }
    if (this.$el.find("#add_form").is(":visible")) {
      return this.$el.find("#add_form").scrollTo();
    }
  };

  KlassesView.prototype.renderKlasses = function() {
    var $ul, i, klass, len, ref, view;
    this.closeViews();
    $ul = $("<ul>").addClass("klass_list");
    ref = this.klasses.models;
    for (i = 0, len = ref.length; i < len; i++) {
      klass = ref[i];
      view = new KlassListElementView({
        klass: klass,
        curricula: this.curricula
      });
      view.on("rendered", this.onSubviewRendered);
      view.render();
      this.views.push(view);
      $ul.append(view.el);
    }
    this.$el.find("#klass_list_wrapper").empty();
    return this.$el.find("#klass_list_wrapper").append($ul);
  };

  KlassesView.prototype.onSubviewRendered = function() {
    return this.trigger("subRendered");
  };

  KlassesView.prototype.render = function() {
    var adminPanel, curricula, curriculaButton, curriculaOptionList, i, len, ref;
    curriculaOptionList = "<option data-id='_none' disabled='disabled' selected='selected'>" + (t('select a curriculum')) + "</option>";
    ref = this.curricula.models;
    for (i = 0, len = ref.length; i < len; i++) {
      curricula = ref[i];
      curriculaOptionList += "<option data-id='" + curricula.id + "'>" + (curricula.get('name')) + "</option>";
    }
    if (Tangerine.user.isAdmin() && Tangerine.settings.get("context") !== "server") {
      adminPanel = "<h1>Admin menu</h1> <button class='pull_data command'>Pull data</button> <div class='uploader'></div>";
    }
    if (Tangerine.settings.get("context") !== "server") {
      curriculaButton = "<button class='command curricula'>" + (t('all curricula')) + "</button>";
    }
    this.$el.html((adminPanel || "") + " <h1>" + (t('classes')) + "</h1> <div id='klass_list_wrapper'></div> <button class='klass_add command'>" + (t('add')) + "</button> <div id='add_form' class='confirmation'> <div class='menu_box'> <div class='label_value'> <label for='school_name'>School name</label> <input id='school_name'> </div> <div class='label_value'> <label for='year'>School year</label> <input id='year'> </div> <div class='label_value'> <label for='grade'>" + (t('grade')) + "</label> <input id='grade'> </div> <div class='label_value'> <label for='stream'>" + (t('stream')) + "</label> <input id='stream'> </div> <div class='label_value'> <label for='curriculum'>" + (t('curriculum')) + "</label><br> <select id='curriculum'>" + curriculaOptionList + "</select> </div> <button class='command klass_save'>" + (t('save')) + "</button><button class='command klass_cancel'>" + (t('cancel')) + "</button> </div> </div> " + (curriculaButton || ''));
    if (Tangerine.user.isAdmin()) {
      this.updateUploader();
    }
    this.renderKlasses();
    return this.trigger("rendered");
  };

  KlassesView.prototype.closeViews = function() {
    var i, len, ref, view;
    ref = this.views != null;
    for (i = 0, len = ref.length; i < len; i++) {
      view = ref[i];
      view.close();
    }
    return this.views = [];
  };

  KlassesView.prototype.onClose = function() {
    return this.closeViews();
  };

  return KlassesView;

})(Backbone.View);
