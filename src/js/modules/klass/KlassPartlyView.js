// Generated by CoffeeScript 1.10.0
var KlassPartlyView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KlassPartlyView = (function(superClass) {
  extend(KlassPartlyView, superClass);

  function KlassPartlyView() {
    return KlassPartlyView.__super__.constructor.apply(this, arguments);
  }

  KlassPartlyView.prototype.className = "KlassPartlyView";

  KlassPartlyView.prototype.events = {
    "click .next_part": "nextPart",
    "click .prev_part": "prevPart",
    "click .back": "back",
    "click .student_subtest": "gotoStudentSubtest",
    "keyup #current_part": "gotoAssessment",
    "keyup #search_student_name": "filterStudents",
    "focus #search_student_name": "scrollToName"
  };

  KlassPartlyView.prototype.scrollToName = function() {
    return this.$el.find("#search_student_name").scrollTo();
  };

  KlassPartlyView.prototype.filterStudents = function() {
    var val;
    val = this.$el.find("#search_student_name").val();
    this.search = val;
    return this.updateGridPage();
  };

  KlassPartlyView.prototype.gotoAssessment = function() {
    var val;
    val = this.$el.find("#current_part").val();
    if (val === "") {
      return;
    }
    this.currentPart = parseInt(val);
    return this.updateGridPage();
  };

  KlassPartlyView.prototype.update = function() {
    this.render();
    return Tangerine.router.navigate("class/" + this.options.klass.id + "/" + this.currentPart);
  };

  KlassPartlyView.prototype.back = function() {
    return Tangerine.router.navigate("class", true);
  };

  KlassPartlyView.prototype.gotoStudentSubtest = function(event) {
    var studentId, subtestId;
    studentId = $(event.target).attr("data-studentId");
    subtestId = $(event.target).attr("data-subtestId");
    return Tangerine.router.navigate("class/result/student/subtest/" + studentId + "/" + subtestId, true);
  };

  KlassPartlyView.prototype.nextPart = function() {
    if (this.currentPart < this.lastPart) {
      this.currentPart++;
      return this.update();
    }
  };

  KlassPartlyView.prototype.prevPart = function() {
    if (this.currentPart > 1) {
      this.currentPart--;
      return this.update();
    }
  };

  KlassPartlyView.prototype.initialize = function(options) {
    this.search = "";
    this.currentPart = options.part || 1;
    this.subtestsByPart = [];
    this.subtestsByPart = options.subtests.indexBy("part");
    return this.lastPart = Math.max.apply(this, _.compact(options.subtests.pluck("part"))) || 1;
  };

  KlassPartlyView.prototype.updateGridPage = function() {
    return this.$el.find("#grid_container").html(this.getGridPage());
  };

  KlassPartlyView.prototype.getGridPage = function() {
    var background, cell, column, gridPage, i, j, k, l, len, len1, len2, len3, len4, m, n, o, p, partTest, q, recency, ref, resultsForThisStudent, row, search, student, studentResult, subtest, subtestsThisPart, table, taken, takenClass;
    table = [];
    subtestsThisPart = this.subtestsByPart[this.currentPart];
    if (subtestsThisPart == null) {
      return "No subtests for this assessment.";
    }
    ref = this.options.students.models;
    for (i = l = 0, len = ref.length; l < len; i = ++l) {
      student = ref[i];
      table[i] = [];
      resultsForThisStudent = new KlassResults(this.options.results.where({
        "studentId": student.id
      }));
      for (j = m = 0, len1 = subtestsThisPart.length; m < len1; j = ++m) {
        subtest = subtestsThisPart[j];
        studentResult = resultsForThisStudent.where({
          "subtestId": subtest.id
        });
        taken = studentResult.length !== 0;
        if (~student.get("name").toLowerCase().indexOf(this.search.toLowerCase()) || this.search === "") {
          for (k = n = 6; n >= 0; k = --n) {
            partTest = this.currentPart - k;
            search = resultsForThisStudent.where({
              "part": partTest,
              "itemType": subtest.get("itemType")
            });
            if (search.length) {
              recency = k;
            }
          }
          background = recency <= 2 ? "" : recency <= 4 ? "rgb(229, 208, 149)" : "rgb(222, 156, 117)";
          table[i].push({
            "content": taken ? "&#x2714;" : "?",
            "taken": taken,
            "studentId": student.id,
            "studentName": student.get("name"),
            "subtestId": subtest.id,
            "background": background
          });
        }
      }
    }
    gridPage = "<table class='info_box_wide'><tbody><tr><th></th>";
    for (o = 0, len2 = subtestsThisPart.length; o < len2; o++) {
      subtest = subtestsThisPart[o];
      gridPage += "<th><div class='part_subtest_report' data-id='" + subtest.id + "'>" + (subtest.get('name')) + "</div></th>";
    }
    gridPage += "</tr>";
    for (p = 0, len3 = table.length; p < len3; p++) {
      row = table[p];
      if ((row != null) && row.length) {
        gridPage += "<tr><td><div class='student' data-studentId='" + row[0].studentId + "'>" + row[0].studentName + "</div></td>";
        for (column = q = 0, len4 = row.length; q < len4; column = ++q) {
          cell = row[column];
          takenClass = cell.taken ? " subtest_taken" : "";
          gridPage += "<td><div class='student_subtest command " + takenClass + "' data-taken='" + cell.taken + "' data-studentId='" + cell.studentId + "' data-subtestId='" + cell.subtestId + "' style='background-color:" + cell.background + " !important;'>" + cell.content + "</div></td>";
        }
        gridPage += "</tr>";
      }
    }
    gridPage += "</tbody></table>";
    if (_.flatten(table).length === 0) {
      gridPage = "<p class='grey'>No students found.</p>";
    }
    return gridPage;
  };

  KlassPartlyView.prototype.render = function() {
    var gridPage;
    gridPage = this.getGridPage();
    this.$el.html("<h1>" + (t('assessment status')) + "</h1> <input id='search_student_name' style='width: 92% !important' placeholder='" + (t('search student name')) + "' type='text'> <div id='grid_container'>" + gridPage + "</div><br> <h2>" + (t('current assessment')) + " </h2> <button class='prev_part command'>&lt;</button> <input type='number' value='" + this.currentPart + "' id='current_part'> <button class='next_part command'>&gt;</button><br><br> <button class='back navigation'>" + (t('back')) + "</button>");
    return this.trigger("rendered");
  };

  return KlassPartlyView;

})(Backbone.View);
