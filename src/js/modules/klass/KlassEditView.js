// Generated by CoffeeScript 1.10.0
var KlassEditView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KlassEditView = (function(superClass) {
  extend(KlassEditView, superClass);

  function KlassEditView() {
    this.renderStudents = bind(this.renderStudents, this);
    this.onSubviewRendered = bind(this.onSubviewRendered, this);
    this.registerStudent = bind(this.registerStudent, this);
    return KlassEditView.__super__.constructor.apply(this, arguments);
  }

  KlassEditView.prototype.className = "KlassEditView";

  KlassEditView.prototype.events = {
    'click .back': 'back',
    'click .save': 'basicInfoSave',
    'click .basic_info_edit': 'basicInfoToggle',
    'click .basic_info_cancel': 'basicInfoToggle',
    'change #teacher_select': 'teacherSelect',
    'click .add_student': 'addStudentToggle',
    'click .add_student_cancel': 'addStudentToggle',
    'click .add_student_add': 'addStudent',
    'click .register_student': 'registerStudentToggle',
    'click .register_student_cancel': 'registerStudentToggle',
    'click .register_student_save': 'registerStudent'
  };

  KlassEditView.prototype.teacherSelect = function(event) {
    var teacherId;
    teacherId = this.$el.find("#teacher_select option:selected").attr("data-teacherId");
    return this.klass.set("teacherId", teacherId);
  };

  KlassEditView.prototype.addStudentToggle = function() {
    this.$el.find(".register_student_form input").val("");
    return this.$el.find(".add_student_form, .add_student").toggle();
  };

  KlassEditView.prototype.registerStudentToggle = function() {
    this.$el.find(".register_student_form, .register_student").toggle();
    if (this.$el.find(".register_student_form").is(":visible")) {
      this.$el.find(".register_student_form").scrollTo();
    }
    return this.$el.find("#register_student_name ,#register_student_gender, #register_student_age").val("");
  };

  KlassEditView.prototype.addStudent = function() {
    var newStudent, studentId;
    if (this.$el.find("#add_student_select option:selected").val() === "_none") {
      return alert("Please select a student, or cancel.");
    } else {
      studentId = this.$el.find("#add_student_select option:selected").attr("data-id");
      newStudent = this.allStudents.get(studentId);
      return newStudent.save({
        klassId: this.klass.id
      }, {
        success: (function(_this) {
          return function() {
            _this.students.add(newStudent);
            return _this.addStudentToggle();
          };
        })(this)
      });
    }
  };

  KlassEditView.prototype.registerStudent = function() {
    var student;
    student = new Student;
    return student.save({
      name: this.$el.find("#register_student_name").val(),
      gender: this.$el.find("#register_student_gender").val(),
      age: this.$el.find("#register_student_age").val(),
      klassId: this.klass.id
    }, {
      success: (function(_this) {
        return function() {
          _this.students.add(student);
          return _this.registerStudentToggle();
        };
      })(this)
    });
  };

  KlassEditView.prototype.basicInfoToggle = function() {
    var $basicInfo;
    this.$el.find(".basic_info").toggle();
    $basicInfo = $(this.$el.find(".basic_info")[1]);
    if ($basicInfo.is(":visible")) {
      $basicInfo.scrollTo();
      this.$el.find("#year").focus();
    }
    this.$el.find("#school_name").val(this.klass.getString("schoolName"));
    this.$el.find("#year").val(this.klass.getString("year"));
    this.$el.find("#grade").val(this.klass.getString("grade"));
    return this.$el.find("#stream").val(this.klass.getString("stream"));
  };

  KlassEditView.prototype.basicInfoSave = function() {
    var inputs, newDate;
    inputs = this.$el.find("#start_date").val().split("/");
    newDate = new Date();
    newDate.setFullYear(parseInt(inputs[0]));
    newDate.setMonth(parseInt(inputs[1]) - 1);
    newDate.setDate(parseInt(inputs[2]));
    return this.klass.save({
      schoolName: this.$el.find("#school_name").val(),
      year: this.$el.find("#year").val(),
      grade: this.$el.find("#grade").val(),
      stream: this.$el.find("#stream").val(),
      startDate: newDate.getTime()
    }, {
      success: (function(_this) {
        return function() {
          return _this.render();
        };
      })(this),
      error: (function(_this) {
        return function() {
          return Utils.midAlert("Save error<br>Please try again.");
        };
      })(this)
    });
  };

  KlassEditView.prototype.back = function() {
    return window.history.back();
  };

  KlassEditView.prototype.initialize = function(options) {
    this.klass = options.klass;
    this.students = options.students;
    this.allStudents = options.allStudents;
    this.teachers = options.teachers;
    this.students.on("add remove change", this.renderStudents);
    return this.views = [];
  };

  KlassEditView.prototype.closeViews = function() {
    var i, len, ref, view;
    ref = this.views;
    for (i = 0, len = ref.length; i < len; i++) {
      view = ref[i];
      view.close();
    }
    return this.views = [];
  };

  KlassEditView.prototype.onSubviewRendered = function() {
    return this.trigger("subRendered");
  };

  KlassEditView.prototype.renderStudents = function() {
    var $ul, i, len, ref, student, view;
    $ul = $("<ul>").addClass("student_list");
    this.closeViews();
    ref = this.students.models;
    for (i = 0, len = ref.length; i < len; i++) {
      student = ref[i];
      view = new StudentListElementView({
        student: student,
        students: this.students
      });
      this.views.push(view);
      view.on("rendered", this.onSubviewRendered);
      view.render();
      view.on("change", this.renderStudents);
      $ul.append(view.el);
    }
    return this.$el.find("#student_list_wrapper").html($ul);

    /*
     * Add student feature
    studentOptionList = "<option value='_none' disabled='disabled' selected='selected'>(#{$.t('name')}) - (#{$.t('age')})</option>"
    for student in @allStudents.models
      isInClass = false
      for double in @students.models
        if double.id == student.id then isInClass = true
      if not isInClass
        studentOptionList += "<option data-id='#{student.id}'>#{student.get 'name'} - #{student.get 'age'}</option>"
    
    @$el.find("#add_student_select").html studentOptionList
     */
  };

  KlassEditView.prototype.render = function() {
    var grade, htmlInfoTeacher, htmlTeacherSelect, schoolName, startDate, stream, teacher, teacherName, year;
    schoolName = this.klass.getString("schoolName");
    year = this.klass.getString("year");
    grade = this.klass.getString("grade");
    stream = this.klass.getString("stream");
    startDate = new Date(this.klass.getNumber("startDate"));
    if (this.klass.get("teacherId") === "admin") {
      teacherName = "admin";
    } else {
      teacherName = this.teachers.get(this.klass.get('teacherId')) && this.teachers.get(this.klass.get('teacherId')).has('name') ? this.teachers.get(this.klass.get('teacherId')).get('name') : "unknown";
    }
    if (Tangerine.user.isAdmin()) {
      htmlInfoTeacher = "<tr><td><label>Teacher</label></td><td>" + teacherName + "</td></tr>";
    }
    if (Tangerine.user.isAdmin()) {
      htmlTeacherSelect = "<label>Teacher</label><br> <select id='teacher_select'> " + ((function() {
        var i, len, ref, results;
        ref = this.teachers.models;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          teacher = ref[i];
          results.push("<option " + (teacher.id === this.klass.get('teacherId') ? "selected='selected' " : "") + " data-teacherId='" + teacher.id + "'>" + (teacher.get('name')) + "</option>");
        }
        return results;
      }).call(this)) + " </select>";
    }
    this.$el.html("<button class='back navigation'>" + (t('back')) + "</button> <h1>" + (t('class editor')) + "</h1> <h2>" + (t('basic info')) + "</h2> <table class='info_box basic_info'> <tr><td><label>School name</label></td><td>" + schoolName + "</td></tr> " + (htmlInfoTeacher || "") + " <tr><td><label>School year</label></td><td>" + year + "</td></tr> <tr><td><label>" + (t('grade')) + "</label></td><td>" + grade + "</td></tr> <tr><td><label>" + (t('stream')) + "</label></td><td>" + stream + "</td></tr> <tr><td><label>" + (t('starting date')) + "</label></td><td>" + (startDate.getFullYear() + "/" + (startDate.getMonth() + 1) + "/" + startDate.getDate()) + "</td></tr> <tr><td colspan='2'><button class='basic_info_edit command'>" + (t('edit')) + "</button></td></tr> </table> <div class='basic_info confirmation'> <div class='menu_box'> <div class='label_value'> <label for='school_name'>School name</label> <input id='school_name' value='" + schoolName + "'> </div> <div class='label_value'> " + (htmlTeacherSelect || "") + " </div> <div class='label_value'> <label for='year'>School year</label> <input id='year' value='" + year + "'> </div> <div class='label_value'> <label for='grade'>" + (t('grade')) + "</label> <input id='grade' value='" + grade + "'> </div> <div class='label_value'> <label for='stream'>" + (t('stream')) + "</label> <input id='stream' value='" + stream + "'> </div> <div class='label_value'> <label for='start_date'>" + (t('starting date')) + "</label> <input id='start_date' value='" + (startDate.getFullYear() + "/" + (startDate.getMonth() + 1) + "/" + startDate.getDate()) + "'> </div> <button class='save command'>" + (t('save')) + "</button> <button class='basic_info_cancel command'>" + (t('cancel')) + "</button> </div> </div> <h2>" + (t('students').capitalize()) + "</h2> <div id='student_list_wrapper'></div> <!-- add student feature --> <!--button class='add_student command'>Add student</button> <div class='add_student_form menu_box confirmation'> <div class='label_value'> <label for='add_student_select'>" + (t('add student')) + "</label><br> <select id='add_student_select'> </select> </div> <button class='add_student_add command'>" + (t('add')) + "</button><button class='add_student_cancel command'>" + (t('cancel')) + "</button> </div--> <button class='register_student command'>" + ($.t("register student")) + "</button> <div class='register_student_form menu_box confirmation'> <h2>" + (t('register student')) + "</h2> <div class='label_value'> <label for='register_student_name'>Full name</label> <input id='register_student_name' value=''> </div> <div class='label_value'> <label for='register_student_gender'>" + (t('gender')) + "</label> <input id='register_student_gender' value=''> </div> <div class='label_value'> <label for='register_student_age'>" + (t('age')) + "</label> <input id='register_student_age' value=''> </div> <button class='register_student_save command'>" + (t('save')) + "</button> <button class='register_student_cancel command'>" + (t('cancel')) + "</button> </div>");
    this.trigger("rendered");
    return this.renderStudents();
  };

  return KlassEditView;

})(Backbone.View);
