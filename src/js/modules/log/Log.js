// Generated by CoffeeScript 1.10.0
var Log, LogView, Logs,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Log = (function(superClass) {
  extend(Log, superClass);

  function Log() {
    return Log.__super__.constructor.apply(this, arguments);
  }

  Log.prototype.url = "log";

  Log.prototype.app = function(code, details) {
    if (code == null) {
      code = "";
    }
    if (details == null) {
      details = "";
    }
    if (!~Tangerine.settings.get("log").indexOf("app")) {
      return;
    }
    return this.add({
      "type": "app",
      "code": code,
      "details": details,
      "timestamp": (new Date()).getTime()
    });
  };

  Log.prototype.db = function(code, details) {
    if (code == null) {
      code = "";
    }
    if (details == null) {
      details = "";
    }
    if (!~Tangerine.settings.get("log").indexOf("db")) {
      return;
    }
    return this.add({
      "type": "db",
      "code": code,
      "details": details,
      "timestamp": (new Date()).getTime()
    });
  };

  Log.prototype.ui = function(code, details) {
    if (code == null) {
      code = "";
    }
    if (details == null) {
      details = "";
    }
    if (!~Tangerine.settings.get("log").indexOf("ui")) {
      return;
    }
    return this.add({
      "type": "ui",
      "code": code,
      "details": details,
      "timestamp": (new Date()).getTime()
    });
  };

  Log.prototype.err = function(code, details) {
    if (code == null) {
      code = "";
    }
    if (details == null) {
      details = "";
    }
    return !~Tangerine.settings.get("log").indexOf("err");
    return this.add({
      "type": "err",
      "code": code,
      "details": details,
      "timestamp": (new Date()).getTime()
    });
  };

  Log.prototype.add = function(logEvent) {
    var d, name;
    d = new Date();
    name = "not-signed-in";
    if (Tangerine.user.name() != null) {
      name = Tangerine.user.name();
    }
    this.unset("_rev");
    return this.save({
      "_id": this.calcName(),
      "year": d.getFullYear(),
      "month": d.getMonth(),
      "date": d.getDate(),
      "timestamp": d.getTime(),
      "user": name,
      "event": logEvent
    });
  };

  Log.prototype.calcName = function() {
    var d, user;
    d = new Date();
    user = "not-signed-in";
    if (Tangerine.user.name() != null) {
      user = Tangerine.user.name();
    }
    return hex_sha1(user + "_" + (d.getTime()));
  };

  return Log;

})(Backbone.Model);

Logs = (function(superClass) {
  extend(Logs, superClass);

  function Logs() {
    return Logs.__super__.constructor.apply(this, arguments);
  }

  Logs.prototype.url = "log";

  Logs.prototype.model = Log;

  Logs.prototype.pouch = {
    viewOptions: {
      key: 'log'
    }
  };

  Logs.prototype.comparator = function(model) {
    return model.get("timestamp");
  };

  return Logs;

})(Backbone.Collection);

LogView = (function(superClass) {
  extend(LogView, superClass);

  function LogView() {
    this.render = bind(this.render, this);
    return LogView.__super__.constructor.apply(this, arguments);
  }

  LogView.prototype.className = "LogView";

  LogView.prototype.events = {
    "change #user_selector": "update"
  };

  LogView.prototype.initialize = function(options) {
    this.logs = options.logs;
    this.logsByUser = this.logs.indexBy("user");
    return this.selectedUser = _.first(_.keys(this.logsByUser));
  };

  LogView.prototype.render = function() {
    var htmlOptions, user;
    htmlOptions = ((function() {
      var i, len, ref, results;
      ref = _.keys(this.logsByUser);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        user = ref[i];
        results.push("<option data-user='" + user + "' " + ((this.selectedUser === user ? "selected='selected'" : void 0) || "") + ">" + user + "</option>");
      }
      return results;
    }).call(this)).join("");
    this.$el.html("<h1>Logs</h1> <select id='user_selector'>" + htmlOptions + "</select> <div class='log_container'></div>");
    this.update();
    return this.trigger("rendered");
  };

  LogView.prototype.update = function() {
    var code, details, ev, htmlTable, i, len, log, logs, name, time;
    this.selectedUser = this.$el.find("#user_selector option:selected").attr("data-user");
    logs = this.logsByUser[this.selectedUser];
    htmlTable = "<h2>User " + this.selectedUser + "</h2> <table> <tr> <th>Code</th> <th>Details</th> <th>Time</th> </tr>";
    for (i = 0, len = logs.length; i < len; i++) {
      log = logs[i];
      if (log.get("event") == null) {
        return;
      }
      ev = log.get("event");
      name = log.get("user");
      code = ev.code;
      details = ev.details;
      time = (new Date(parseInt(ev.timestamp))).toString();
      htmlTable += "<tr> <td>" + code + "</td> <td>" + details + "</td> <td>" + time + "</td> </tr>";
    }
    htmlTable += "</table>";
    return this.$el.find(".log_container").html(htmlTable);
  };

  return LogView;

})(Backbone.View);
