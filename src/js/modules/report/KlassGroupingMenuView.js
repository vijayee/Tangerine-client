// Generated by CoffeeScript 1.10.0
var KlassGroupingMenuView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KlassGroupingMenuView = (function(superClass) {
  extend(KlassGroupingMenuView, superClass);

  function KlassGroupingMenuView() {
    return KlassGroupingMenuView.__super__.constructor.apply(this, arguments);
  }

  KlassGroupingMenuView.prototype.className = "KlassGroupingMenuView";

  KlassGroupingMenuView.prototype.events = {
    'change .part_selector': 'gotoKlassGroupingReport'
  };

  KlassGroupingMenuView.prototype.gotoKlassGroupingReport = function(event) {
    return Tangerine.router.navigate(("report/klassGrouping/" + this.klass.id + "/") + this.$el.find(event.target).find(":selected").attr("data-part"), true);
  };

  KlassGroupingMenuView.prototype.initialize = function(options) {
    this.parent = options.parent;
    this.klass = this.parent.options.klass;
    this.curricula = this.parent.options.curricula;
    this.currentPart = this.klass.calcCurrentPart();
    this.students = new Students;
    return this.students.fetch({
      klassId: this.klass.id,
      success: (function(_this) {
        return function() {
          var allSubtests;
          allSubtests = new Subtests;
          return allSubtests.fetch({
            success: function(collection) {
              var i, len, part, subtest, subtests;
              subtests = collection.where({
                curriculaId: _this.curricula.id
              });
              _this.parts = [];
              for (i = 0, len = subtests.length; i < len; i++) {
                subtest = subtests[i];
                part = subtest.get('part');
                if (_this.parts[part] == null) {
                  _this.parts[part] = {};
                }
                _this.parts[part]["id"] = subtest.id;
                if (_this.parts[part]["name"] != null) {
                  _this.parts[part]["name"] += " " + subtest.get("name");
                } else {
                  _this.parts[part]["name"] = subtest.get("name");
                }
                _this.parts[part]["reportType"] = subtest.get("reportType");
              }
              _this.ready = true;
              return _this.render();
            }
          });
        };
      })(this)
    });
  };

  KlassGroupingMenuView.prototype.render = function() {
    var flagForCurrent, html, i, len, part, ref, subtest;
    if (this.ready) {
      if ((this.students == null) || this.students.length === 0) {
        this.$el.html("Please add students to this class.");
        return;
      }
      html = "<select class='part_selector'> <option disabled='disabled' selected='selected'>Select an assessment</option>";
      ref = this.parts;
      for (part = i = 0, len = ref.length; i < len; part = ++i) {
        subtest = ref[part];
        if ((subtest != null ? subtest.id : void 0) != null) {
          flagForCurrent = this.currentPart === part ? "**" : '';
          html += "<option data-part='" + part + "' data-subtestId='" + subtest.id + "'>" + flagForCurrent + " " + part + " " + subtest.name + "</option>";
        }
      }
      html += "</select>";
      return this.$el.html(html);
    } else {
      return this.$el.html("<img src='images/loading.gif' class='loading'>");
    }
  };

  return KlassGroupingMenuView;

})(Backbone.View);
