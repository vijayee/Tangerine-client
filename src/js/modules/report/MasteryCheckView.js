// Generated by CoffeeScript 1.10.0
var MasteryCheckView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MasteryCheckView = (function(superClass) {
  extend(MasteryCheckView, superClass);

  function MasteryCheckView() {
    return MasteryCheckView.__super__.constructor.apply(this, arguments);
  }

  MasteryCheckView.prototype.className = "MasteryCheckView";

  MasteryCheckView.prototype.events = {
    "click .back": "goBack"
  };

  MasteryCheckView.prototype.goBack = function() {
    return history.back();
  };

  MasteryCheckView.prototype.initialize = function(options) {
    this.subtests = options.subtests;
    this.results = options.results;
    this.student = options.student;
    this.klass = options.klass;
    this.resultsByPart = this.results.indexBy("part");
    this.lastPart = Math.max.apply(this, this.results.pluck("part"));
    if (!isFinite(this.lastPart)) {
      return this.lastPart = 0;
    }
  };

  MasteryCheckView.prototype.render = function() {
    var html, htmlWarning, i, j, len, part, ref, ref1, result, subtestName;
    html = "<h1>Mastery check report</h1> <h2>Student " + (this.student.get("name")) + "</h2>";
    htmlWarning = "<p>No test data for this type of report. Return to the <a href='#class'>class menu</a> and click the <img src='images/icon_run.png'> icon to collect data.</p>";
    if (this.results.length === 0) {
      this.$el.html(html + " " + htmlWarning);
      this.trigger("rendered");
      return;
    }
    html += "<table>";
    for (part = i = 1, ref = this.lastPart; 1 <= ref ? i <= ref : i >= ref; part = 1 <= ref ? ++i : --i) {
      if (this.resultsByPart[part] == null) {
        continue;
      }
      html += "<tr><th>Assessment " + part + "</th></tr> <tr>";
      ref1 = this.resultsByPart[part];
      for (j = 0, len = ref1.length; j < len; j++) {
        result = ref1[j];
        subtestName = this.subtests.get(result.get('subtestId')).get('name');
        html += "<td> " + (result.get("itemType").titleize()) + " correct<br> " + subtestName + " </td> <td>" + (result.get("correct")) + "/" + (result.get("total")) + "</td>";
      }
    }
    html += "</table> <button class='navigation back'>" + (t('back')) + "</button>";
    this.$el.html(html);
    return this.trigger("rendered");
  };

  return MasteryCheckView;

})(Backbone.View);
