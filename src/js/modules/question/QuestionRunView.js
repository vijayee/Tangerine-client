// Generated by CoffeeScript 1.10.0
var QuestionRunView, SurveyReviewView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QuestionRunView = (function(superClass) {
  extend(QuestionRunView, superClass);

  function QuestionRunView() {
    this.getName = bind(this.getName, this);
    this.setName = bind(this.setName, this);
    this.setHint = bind(this.setHint, this);
    this.setPrompt = bind(this.setPrompt, this);
    this.setMessage = bind(this.setMessage, this);
    this.setAnswer = bind(this.setAnswer, this);
    this.setOptions = bind(this.setOptions, this);
    this.updateResult = bind(this.updateResult, this);
    this.update = bind(this.update, this);
    this.onShow = bind(this.onShow, this);
    this.previousAnswer = bind(this.previousAnswer, this);
    return QuestionRunView.__super__.constructor.apply(this, arguments);
  }

  QuestionRunView.prototype.className = "question";

  QuestionRunView.prototype.events = {
    'change input': 'update',
    'change textarea': 'update',
    'click .autoscroll_icon': 'scroll'
  };

  QuestionRunView.prototype.scroll = function(event) {
    return this.trigger("scroll", event, this.model.get("order"));
  };

  QuestionRunView.prototype.initialize = function(options) {
    this.on("show", (function(_this) {
      return function() {
        return _this.onShow();
      };
    })(this));
    this.model = options.model;
    this.parent = options.parent;
    this.dataEntry = options.dataEntry;
    this.fontFamily = this.parent.model.get('fontFamily');
    if (this.parent.model.get("fontFamily") !== "") {
      this.fontStyle = "style=\"font-family: " + (this.parent.model.get('fontFamily')) + " !important;\"";
    }
    if (!this.dataEntry) {
      this.answer = options.answer;
    } else {
      this.answer = {};
    }
    this.name = this.model.escape("name").replace(/[^A-Za-z0-9_]/g, "-");
    this.type = this.model.get("type");
    this.options = this.model.get("options");
    this.notAsked = options.notAsked;
    this.isObservation = options.isObservation;
    this.defineSpecialCaseResults();
    if (this.model.getBoolean("skippable")) {
      this.isValid = true;
      this.skipped = true;
    } else {
      this.isValid = false;
      this.skipped = false;
    }
    if (this.notAsked === true) {
      this.isValid = true;
      this.updateResult();
    }
    if (this.type === "single" || this.type === "multiple") {
      this.button = new ButtonView({
        options: this.options,
        mode: this.type,
        dataEntry: this.dataEntry,
        answer: this.answer,
        fontFamily: this.fontFamily
      });
      return this.button.on("change rendered", (function(_this) {
        return function() {
          return _this.update();
        };
      })(this));
    }
  };

  QuestionRunView.prototype.previousAnswer = function() {
    if (this.parent.questionIndex >= 0) {
      return this.parent.questionViews[this.parent.questionIndex - 1].answer;
    }
  };

  QuestionRunView.prototype.onShow = function() {
    var error, error1, message, name, showCode;
    showCode = this.model.getString("displayCode");
    if (_.isEmptyString(showCode)) {
      return;
    }
    try {
      return CoffeeScript["eval"].apply(this, [showCode]);
    } catch (error1) {
      error = error1;
      name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
      message = error.message;
      return alert("Display code error\n\n" + name + "\n\n" + message);
    }
  };

  QuestionRunView.prototype.update = function(event) {
    this.updateResult();
    this.updateValidity();
    return this.trigger("answer", event, this.model.get("order"));
  };

  QuestionRunView.prototype.updateResult = function() {
    var i, j, len, option, ref, results;
    if (this.notAsked === true) {
      if (this.type === "multiple") {
        ref = this.options;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          option = ref[i];
          results.push(this.answer[this.options[i].value] = "not_asked");
        }
        return results;
      } else {
        return this.answer = "not_asked";
      }
    } else {
      if (this.type === "open") {
        return this.answer = this.$el.find("#" + this.cid + "_" + this.name).val();
      } else {
        return this.answer = this.button.answer;
      }
    }
  };

  QuestionRunView.prototype.updateValidity = function() {
    var customValidationCode, e, error1, isAutostopped, isLogicSkipped, isSkippable;
    isSkippable = this.model.getBoolean("skippable");
    isAutostopped = this.$el.hasClass("disabled_autostop");
    isLogicSkipped = this.$el.hasClass("disabled_skipped");
    if (isSkippable || (isLogicSkipped || isAutostopped)) {
      this.isValid = true;
      return this.skipped = _.isEmptyString(this.answer) ? true : false;
    } else {
      customValidationCode = this.model.get("customValidationCode");
      if (!this.answer) {
        this.answer = "";
      }
      if (!_.isEmptyString(customValidationCode)) {
        try {
          return this.isValid = CoffeeScript["eval"].apply(this, [customValidationCode]);
        } catch (error1) {
          e = error1;
          return alert("Custom Validation error\n\n" + e);
        }
      } else {
        return this.isValid = (function() {
          switch (this.type) {
            case "open":
              if (_.isEmptyString(this.answer) || (_.isEmpty(this.answer) && _.isObject(this.answer))) {
                return false;
              } else {
                return true;
              }
              break;
            case "multiple":
              if (~_.values(this.answer).indexOf("checked")) {
                return true;
              } else {
                return false;
              }
              break;
            case "single":
              if (_.isEmptyString(this.answer) || (_.isEmpty(this.answer) && _.isObject(this.answer))) {
                return false;
              } else {
                return true;
              }
          }
        }).call(this);
      }
    }
  };

  QuestionRunView.prototype.setOptions = function(options) {
    this.button.options = options;
    return this.button.render();
  };

  QuestionRunView.prototype.setAnswer = function(answer) {
    if (_.isString(answer) && this.type === "multiple") {
      alert("setAnswer Error\nTried to set " + this.type + " type " + this.name + " question to string answer.");
    }
    if (!_.isObject(answer) && this.type === "multiple") {
      alert("setAnswer Error\n" + this.name + " question requires an object");
    }
    if (this.type === "multiple") {
      this.button.answer = $.extend(this.button.answer, answer);
    } else if (this.type === "single") {
      this.button.answer = answer;
    } else {
      this.answer = answer;
    }
    this.updateValidity();
    return this.button.render();
  };

  QuestionRunView.prototype.setMessage = function(message) {
    return this.$el.find(".error_message").html(message);
  };

  QuestionRunView.prototype.setPrompt = function(prompt) {
    return this.$el.find(".prompt").html(prompt);
  };

  QuestionRunView.prototype.setHint = function(hint) {
    return this.$el.find(".hint").html(hint);
  };

  QuestionRunView.prototype.setName = function(newName) {
    if (newName == null) {
      newName = this.model.get('name');
    }
    this.model.set("name", newName);
    return this.name = this.model.escape("name").replace(/[^A-Za-z0-9_]/g, "-");
  };

  QuestionRunView.prototype.getName = function() {
    return this.model.get("name");
  };

  QuestionRunView.prototype.render = function() {
    var answerValue, html;
    this.$el.attr("id", "question-" + this.name);
    if (!this.notAsked) {
      html = "<div class='error_message'></div><div class='prompt' " + (this.fontStyle || "") + ">" + (this.model.get('prompt')) + "</div> <div class='hint' " + (this.fontStyle || "") + ">" + (this.model.get('hint') || "") + "</div>";
      if (this.type === "open") {
        if (_.isString(this.answer) && !_.isEmpty(this.answer)) {
          answerValue = this.answer;
        }
        if (this.model.get("multiline")) {
          html += "<div><textarea id='" + this.cid + "_" + this.name + "' data-cid='" + this.cid + "' value='" + (answerValue || '') + "'></textarea></div>";
        } else {
          html += "<div><input id='" + this.cid + "_" + this.name + "' data-cid='" + this.cid + "' value='" + (answerValue || '') + "'></div>";
        }
      } else {
        html += "<div class='button_container'></div>";
      }
      if (this.isObservation) {
        html += "<img src='images/icon_scroll.png' class='icon autoscroll_icon' data-cid='" + this.cid + "'>";
      }
      this.$el.html(html);
      if (this.type === "single" || this.type === "multiple") {
        this.button.setElement(this.$el.find(".button_container"));
        this.button.on("rendered", (function(_this) {
          return function() {
            return _this.trigger("rendered");
          };
        })(this));
        return this.button.render();
      } else {
        return this.trigger("rendered");
      }
    } else {
      this.$el.hide();
      return this.trigger("rendered");
    }
  };

  QuestionRunView.prototype.defineSpecialCaseResults = function() {
    var element, i, j, k, len, len1, list, option, ref;
    list = ["missing", "notAsked", "skipped", "logicSkipped", "notAskedAutostop"];
    for (j = 0, len = list.length; j < len; j++) {
      element = list[j];
      if (this.type === "single" || this.type === "open") {
        this[element + "Result"] = element;
      }
      if (this.type === "multiple") {
        this[element + "Result"] = {};
        ref = this.options;
        for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
          option = ref[i];
          this[element + "Result"][this.options[i].value] = element;
        }
      }
    }
  };

  return QuestionRunView;

})(Backbone.View);

SurveyReviewView = (function(superClass) {
  extend(SurveyReviewView, superClass);

  function SurveyReviewView() {
    return SurveyReviewView.__super__.constructor.apply(this, arguments);
  }

  SurveyReviewView.prototype.className = "QuestionReviewView";

  SurveyReviewView.prototype.initialize = function(options) {
    return this.views = options.views;
  };

  SurveyReviewView.prototype.render = function() {
    var answers, view;
    answers = ((function() {
      var j, len, ref, results;
      ref = this.views;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        view = ref[j];
        results.push("<div class='label_value'> <h3></h3> </div>");
      }
      return results;
    }).call(this)).join("");
    return this.$el.html("<h2>Please review your answers and press next when ready.</h2> " + answers);
  };

  return SurveyReviewView;

})(Backbone.View);
