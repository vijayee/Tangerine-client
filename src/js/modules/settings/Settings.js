// Generated by CoffeeScript 1.10.0
var Settings,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Settings = (function(superClass) {
  extend(Settings, superClass);

  function Settings() {
    this.update = bind(this.update, this);
    return Settings.__super__.constructor.apply(this, arguments);
  }

  Settings.prototype.url = "settings";

  Settings.prototype.initialize = function() {
    var x;
    this.ipRange = _.uniq(((function() {
      var i, results;
      results = [];
      for (x = i = 100; i <= 200; x = ++i) {
        results.push(x);
      }
      return results;
    })()).concat((function() {
      var i, results;
      results = [];
      for (x = i = 0; i <= 255; x = ++i) {
        results.push(x);
      }
      return results;
    })()));
    this.config = Tangerine.config;
    return this.on("change", (function(_this) {
      return function() {
        return _this.update();
      };
    })(this));
  };

  Settings.prototype.update = function() {
    var designDoc, groupDDoc, groupHost, groupName, port, prefix, splitGroup, subnetBase, x;
    groupHost = this.getString("groupHost");
    groupName = this.getString("groupName");
    groupDDoc = this.getString("groupDDoc");
    this.upUser = "uploader-" + groupName;
    this.upPass = this.get("upPass");
    designDoc = Tangerine.design_doc;
    prefix = Tangerine.conf.groupPrefix;
    this.groupDB = "" + prefix + groupName;
    subnetBase = Tangerine.conf.subnet_base;
    port = Tangerine.conf.tablet_port;
    if (Tangerine.settings.get("context") !== "server") {
      splitGroup = groupHost.split("://");
      groupHost = splitGroup[0] + "://" + this.upUser + ":" + this.upPass + "@" + splitGroup[1];
    }
    this.location = {
      group: {
        url: groupHost + "/",
        db: groupHost + "/" + prefix + groupName + "/"
      },
      subnet: {
        url: (function() {
          var i, results;
          results = [];
          for (x = i = 0; i <= 255; x = ++i) {
            results.push("http://" + subnetBase + this.ipRange[x] + ":" + port + "/");
          }
          return results;
        }).call(this),
        db: (function() {
          var i, results;
          results = [];
          for (x = i = 0; i <= 255; x = ++i) {
            results.push("http://" + subnetBase + this.ipRange[x] + ":" + port + "/" + Tangerine.db_name + "/");
          }
          return results;
        }).call(this)
      }
    };
    this.couch = {
      view: "_design/" + designDoc + "/_view/",
      index: "_design/" + designDoc + "/index.html"
    };
    return this.groupCouch = {
      view: "_design/" + groupDDoc + "/_view/",
      index: "_design/" + groupDDoc + "/index.html"
    };
  };

  Settings.prototype.urlBulkDocs = function() {
    var bulkDocsURL;
    return bulkDocsURL = "/" + Tangerine.db_name + "/_bulk_docs";
  };

  Settings.prototype.urlIndex = function(groupName, hash) {
    var groupHost, port;
    if (hash == null) {
      hash = null;
    }
    groupHost = this.get("groupHost");
    port = groupName === "local" ? ":" + Tangerine.conf.tablet_port : "";
    hash = hash != null ? "#" + hash : "";
    if (groupName === "trunk") {
      groupName = "tangerine";
    } else {
      groupName = Tangerine.conf.groupPrefix + groupName;
    }
    return "" + groupHost + port + "/" + groupName + "/" + this.couch.index + hash;
  };

  Settings.prototype.urlHost = function(location) {
    return "" + this.location[location].url;
  };

  Settings.prototype.urlDB = function(location, pass) {
    var result, splitDB;
    if (pass == null) {
      pass = null;
    }
    if (location === "local") {
      result = ("" + this.location[location].db).slice(1, -1);
    } else {
      result = ("" + this.location[location].db).slice(0, -1);
    }
    splitDB = result.split("://");
    if (pass === true) {
      result = splitDB[0] + "://" + this.upUser + ":" + this.upPass + "@" + splitDB[1];
    } else if (pass != null) {
      result = splitDB[0] + "://" + (Tangerine.user.name()) + ":" + pass + "@" + splitDB[1];
    }
    return result;
  };

  Settings.prototype.urlDDoc = function(location) {
    var dDoc;
    dDoc = Tangerine.designDoc;
    return (this.urlDB('trunk')) + "/_design/" + dDoc;
  };

  Settings.prototype.urlView = function(location, view) {
    if (location === "group") {
      return "" + this.location[location].db + this.groupCouch.view + view;
    } else {
      return "" + this.location[location].db + this.couch.view + view;
    }
  };

  Settings.prototype.urlList = function(location, list) {
    if (location === "group") {
      return "" + this.location[location].db + this.groupCouch.list + list;
    } else {
      return "" + this.location[location].db + this.couch.list + list;
    }
  };

  Settings.prototype.urlShow = function(location, show) {
    if (location === "group") {
      return "" + this.location[location].db + this.groupCouch.show + show;
    } else {
      return "" + this.location[location].db + this.couch.show + show;
    }
  };

  Settings.prototype.urlSubnet = function(ip) {
    var dbName, port;
    port = Tangerine.conf.tablet_port;
    dbName = Tangerine.conf.db_name;
    return "http://" + ip + ":" + port + "/" + dbName;
  };

  Settings.prototype.subnetIP = function(index) {
    var base;
    base = Tangerine.conf.subnet_base;
    return "" + base + this.ipRange[index];
  };

  return Settings;

})(Backbone.Model);
