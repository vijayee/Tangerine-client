// Generated by CoffeeScript 1.10.0
var TabletManagerView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

TabletManagerView = (function(superClass) {
  extend(TabletManagerView, superClass);

  function TabletManagerView() {
    this.pushDocs = bind(this.pushDocs, this);
    this.updatePullResult = bind(this.updatePullResult, this);
    this.updatePull = bind(this.updatePull, this);
    this.pullDocs = bind(this.pullDocs, this);
    this.sync = bind(this.sync, this);
    return TabletManagerView.__super__.constructor.apply(this, arguments);
  }

  TabletManagerView.prototype.className = "KlassesView";

  TabletManagerView.prototype.i18n = function() {
    return this.text = {
      detectingTablets: t("TabletManagerView.message.detecting"),
      syncComplete: t("TabletManagerView.label.sync_complete")
    };
  };

  TabletManagerView.prototype.initialize = function(options) {
    this.i18n();
    this.ipBlock = 32;
    this.totalIps = 256;
    this.tabletOffset = 0;
    this.callbacks = options.callbacks;
    return this.docTypes = options.docTypes;
  };

  TabletManagerView.prototype.sync = function() {
    if (this.tabletOffset !== 0) {
      return;
    }
    return this.pullDocs();
  };

  TabletManagerView.prototype.pullDocs = function() {
    if (this.tabletOffset === 0) {
      this.tablets = {
        checked: 0,
        complete: 0,
        successful: 0,
        okCount: 0,
        ips: [],
        result: 0
      };
      Utils.midAlert(this.text.detectingTablets);
    }
    Utils.working(true);
    this.randomIdDoc = hex_sha1("" + Math.random());
    return Tangerine.$db.saveDoc({
      "_id": this.randomIdDoc
    }, {
      success: (function(_this) {
        return function(doc) {
          var i, local, ref, ref1, results;
          _this.randomDoc = doc;
          results = [];
          for (local = i = ref = _this.tabletOffset, ref1 = (_this.ipBlock - 1) + _this.tabletOffset; ref <= ref1 ? i <= ref1 : i >= ref1; local = ref <= ref1 ? ++i : --i) {
            results.push((function(local) {
              var ip, req;
              ip = Tangerine.settings.subnetIP(local);
              req = $.ajax({
                url: Tangerine.settings.urlSubnet(ip),
                dataType: "jsonp",
                contentType: "application/json;charset=utf-8",
                timeout: 20000
              });
              return req.complete(function(xhr, error) {
                _this.tablets.checked++;
                if (parseInt(xhr.status) === 200) {
                  _this.tablets.okCount++;
                  _this.tablets.ips.push(ip);
                }
                return _this.updatePull();
              });
            })(local));
          }
          return results;
        };
      })(this),
      error: function() {
        Utils.working(false);
        return Utils.midAlert(this.text.internalError);
      }
    });
  };

  TabletManagerView.prototype.updatePull = function() {
    var i, ip, len, percentage, ref, results;
    if (this.tablets.checked < this.ipBlock + this.tabletOffset) {
      return;
    }
    if (this.tabletOffset !== this.totalIps - this.ipBlock) {
      percentage = Math.round(this.tabletOffset / this.totalIps * 100);
      Utils.midAlert(t("TabletManagerView.message.searching", {
        percentage: percentage
      }));
      this.tabletOffset += this.ipBlock;
      return this.pullDocs();
    } else {
      this.tablets.okCount = Math.max(this.tablets.okCount - 1, 0);
      if (this.tablets.okCount === 0) {
        this.tabletOffset = 0;
        Utils.working(false);
        Utils.midAlert(t("TabletManagerView.message.found", {
          count: this.tablets.okCount
        }));
        Tangerine.$db.removeDoc({
          "_id": this.randomDoc.id,
          "_rev": this.randomDoc.rev
        });
        return;
      }
      if (!confirm(t("TabletManagerView.message.confirm_pull", {
        __found__: this.tablets.okCount
      }))) {
        this.tabletOffset = 0;
        Utils.working(false);
        Tangerine.$db.removeDoc({
          "_id": this.randomDoc.id,
          "_rev": this.randomDoc.rev
        });
        return;
      }
      Utils.midAlert(t("TabletManagerView.message.pull_status", {
        tabletCount: this.tablets.okCount
      }));
      ref = this.tablets.ips;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        ip = ref[i];
        results.push((function(_this) {
          return function(ip) {
            var selfReq;
            selfReq = $.ajax({
              "url": Tangerine.settings.urlSubnet(ip) + "/" + _this.randomIdDoc,
              "dataType": "jsonp",
              "timeout": 10000,
              "contentType": "application/json;charset=utf-8"
            });
            selfReq.success(function(data, xhr, error) {
              return _this.selfSubnetIp = ip;
            });
            return selfReq.complete(function(xhr, error) {
              return (function(xhr) {
                var viewReq;
                if (parseInt(xhr.status) === 200) {
                  return;
                }
                viewReq = $.ajax({
                  "url": Tangerine.settings.urlSubnet(ip) + "/_design/tangerine/_view/byCollection",
                  "dataType": "jsonp",
                  "contentType": "application/json;charset=utf-8",
                  "data": {
                    include_docs: false,
                    keys: JSON.stringify(_this.docTypes)
                  }
                });
                return viewReq.success(function(data) {
                  var datum, docList;
                  docList = (function() {
                    var j, len1, ref1, results1;
                    ref1 = data.rows;
                    results1 = [];
                    for (j = 0, len1 = ref1.length; j < len1; j++) {
                      datum = ref1[j];
                      results1.push(datum.id);
                    }
                    return results1;
                  })();
                  return $.couch.replicate(Tangerine.settings.urlSubnet(ip), Tangerine.settings.urlDB("local"), {
                    success: function() {
                      _this.tablets.complete++;
                      _this.tablets.successful++;
                      return _this.updatePullResult();
                    },
                    error: function(a, b) {
                      _this.tablets.complete++;
                      return _this.updatePullResult();
                    }
                  }, {
                    doc_ids: docList
                  });
                });
              })(xhr);
            });
          };
        })(this)(ip));
      }
      return results;
    }
  };

  TabletManagerView.prototype.updatePullResult = function() {
    var base;
    if (this.tablets.complete === this.tablets.okCount) {
      Utils.working(false);
      Utils.midAlert(t("TabletManagerView.message.pull_complete", {
        successful: this.tablets.successful,
        total: this.tablets.okCount
      }));
      Tangerine.$db.removeDoc({
        "_id": this.randomDoc.id,
        "_rev": this.randomDoc.rev
      });
      return typeof (base = this.callbacks).completePull === "function" ? base.completePull() : void 0;
    }
  };

  TabletManagerView.prototype.pushDocs = function() {
    if (!_.isObject(this.push)) {
      Utils.working(true);
      return Tangerine.$db.view(Tangerine.design_doc + "/byCollection", {
        keys: this.docTypes,
        success: (function(_this) {
          return function(response) {
            var docIds;
            docIds = _.pluck(response.rows, "id");
            _this.push = {
              ips: _.without(_this.tablets.ips, _this.selfSubnetIp),
              docIds: docIds,
              current: 0,
              complete: 0,
              successful: 0
            };
            return _this.pushDocs();
          };
        })(this)
      });
    } else {
      if (this.push.complete === this.push.ips.length) {
        Utils.working(false);
        return Utils.sticky("<b>" + this.text.syncComplete + "</b><br>" + (t("TabletManagerView.message.successful_count", {
          successful: this.push.successful,
          total: this.push.complete
        })));
      } else {
        Utils.midAlert(t("TabletManagerView.message.syncing", {
          done: this.push.complete + 1,
          total: this.push.ips.length
        }));
        return $.couch.replicate(Tangerine.settings.urlDB("local"), Tangerine.settings.urlSubnet(this.push.ips[this.push.current]), {
          success: (function(_this) {
            return function() {
              _this.push.complete++;
              _this.push.successful++;
              return _this.pushDocs();
            };
          })(this),
          error: (function(_this) {
            return function(a, b) {
              _this.push.complete++;
              return _this.pushDocs();
            };
          })(this)
        }, {
          doc_ids: this.push.docIds
        });
      }
    }
  };

  return TabletManagerView;

})(Backbone.View);
