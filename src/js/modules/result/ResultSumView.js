// Generated by CoffeeScript 1.10.0
var ResultSumView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultSumView = (function(superClass) {
  extend(ResultSumView, superClass);

  function ResultSumView() {
    return ResultSumView.__super__.constructor.apply(this, arguments);
  }

  ResultSumView.prototype.className = "info_box";

  ResultSumView.prototype.events = {
    'click .details': 'toggleDetails'
  };

  ResultSumView.prototype.toggleDetails = function() {
    return this.$el.find('.detail_box').toggle(250);
  };

  ResultSumView.prototype.i18n = function() {
    return this.text = {
      resume: t("ResultSumView.button.resume"),
      noResults: t("ResultSumView.message.no_results")
    };
  };

  ResultSumView.prototype.initialize = function(options) {
    var j, len, prototype, ref, ref1, results, subtest;
    this.i18n();
    this.result = options.model;
    this.finishCheck = options.finishCheck;
    this.finished = ((ref = _.last(this.result.attributes.subtestData)) != null ? ref.data.end_time : void 0) != null ? true : false;
    this.studentId = "";
    ref1 = this.result.attributes.subtestData;
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      subtest = ref1[j];
      prototype = subtest.prototype;
      if (prototype === "id") {
        this.studentId = subtest.data.participant_id;
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ResultSumView.prototype.render = function() {
    var datum, html, i, itemPlural, j, len, ref, ref1, sum;
    html = "<div class='detail_box'>";
    if (!(this.finished || !this.finishCheck)) {
      html += "<div><a href='#resume/" + (this.result.get('assessmentId')) + "/" + this.result.id + "'><button class='command'>" + this.text.resume + "</button></a></div>";
    }
    html += "<table>";
    ref = this.result.get("subtestData");
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      datum = ref[i];
      sum = ((ref1 = datum.data.items) != null ? ref1.length : void 0) || Object.keys(datum.data).length;
      itemPlural = sum > 1 ? "s" : "";
      html += "<tr><td>" + datum.name + "</td><td>" + sum + " item" + itemPlural + "</td></tr>";
    }
    html += "</div>";
    this.$el.html(html);
    return this.trigger("rendered");
  };

  return ResultSumView;

})(Backbone.View);
