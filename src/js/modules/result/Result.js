// Generated by CoffeeScript 1.10.0
var Result,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Result = (function(superClass) {
  extend(Result, superClass);

  function Result() {
    return Result.__super__.constructor.apply(this, arguments);
  }

  Result.prototype.url = "result";

  Result.prototype.initialize = function(options) {
    var device, deviceInfo;
    if (options.blank === true) {
      device = device || Device || {};
      deviceInfo = {
        'name': device.name,
        'platform': device.platform,
        'uuid': device.uuid,
        'version': device.version,
        'userAgent': navigator.userAgent
      };
      this.set({
        'subtestData': [],
        'start_time': (new Date()).getTime(),
        'enumerator': Tangerine.user.name(),
        'tangerine_version': Tangerine.version,
        'device': deviceInfo,
        'instanceId': Tangerine.settings.getString("instanceId")
      });
      return this.unset("blank");
    }
  };

  Result.prototype.add = function(subtestDataElement, callbacks) {
    if (callbacks == null) {
      callbacks = {};
    }
    this.setSubtestData(subtestDataElement, callbacks);
    return this.save(null, {
      success: callbacks.success || $.noop,
      error: callbacks.error || $.noop
    });
  };

  Result.prototype.insert = function(newElement) {
    var i, j, len, newSubtestData, oldElement, oldSubtestData;
    oldSubtestData = this.get("subtestData");
    newSubtestData = oldSubtestData;
    for (i = j = 0, len = oldSubtestData.length; j < len; i = ++j) {
      oldElement = oldSubtestData[i];
      if (oldElement.subtestId === newElement.subtestId) {
        newSubtestData[i] = newElement;
        break;
      }
    }
    return this.set("subtestData", newSubtestData);
  };

  Result.prototype.setSubtestData = function(subtestDataElement, subtestId) {
    var subtestData;
    subtestDataElement['timestamp'] = (new Date()).getTime();
    subtestData = this.get('subtestData');
    subtestData.push(subtestDataElement);
    return this.set('subtestData', subtestData);
  };

  Result.prototype.getVariable = function(key) {
    var data, i, j, k, label, len, len1, name, ref, ref1, state, subtest, value, variable;
    ref = this.get("subtestData");
    for (j = 0, len = ref.length; j < len; j++) {
      subtest = ref[j];
      data = subtest.data;
      if (data.labels != null) {
        ref1 = data.labels;
        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
          label = ref1[i];
          if (label === key) {
            return data.location[i];
          }
        }
      } else {
        for (variable in data) {
          value = data[variable];
          if (variable === key) {
            if (_.isObject(value)) {
              return _.compact((function() {
                var results;
                results = [];
                for (name in value) {
                  state = value[name];
                  results.push(state === "checked" ? name : void 0);
                }
                return results;
              })());
            } else {
              return value;
            }
          }
        }
      }
    }
    return null;
  };

  Result.prototype.getByHash = function(hash) {
    var j, len, ref, subtest;
    ref = this.get("subtestData");
    for (j = 0, len = ref.length; j < len; j++) {
      subtest = ref[j];
      if (hash === subtest.subtestHash) {
        return subtest.data;
      }
    }
    return null;
  };

  Result.prototype.getGridScore = function(id) {
    var datum, j, len, ref;
    ref = this.get('subtestData');
    for (j = 0, len = ref.length; j < len; j++) {
      datum = ref[j];
      if (datum.subtestId === id) {
        return parseInt(datum.data.attempted);
      }
    }
  };

  Result.prototype.getItemResultCountByVariableName = function(name, result) {
    var count, datum, found, item, items, j, k, len, len1, ref;
    found = false;
    count = 0;
    ref = this.get('subtestData');
    for (j = 0, len = ref.length; j < len; j++) {
      datum = ref[j];
      if ((datum.data != null) && (datum.data.variable_name != null) && datum.data.variable_name === name) {
        found = true;
        items = datum.data.items;
        for (k = 0, len1 = items.length; k < len1; k++) {
          item = items[k];
          if (item.itemResult === result) {
            count++;
          }
        }
      }
    }
    if (!found) {
      throw new Error("Variable name \"" + name + "\" not found");
    }
    return count;
  };

  Result.prototype.gridWasAutostopped = function(id) {
    var datum, j, len, ref;
    ref = this.get('subtestData');
    for (j = 0, len = ref.length; j < len; j++) {
      datum = ref[j];
      if (datum.subtestId === id) {
        return datum.data.auto_stop;
      }
    }
  };

  return Result;

})(Backbone.Model);
