// Generated by CoffeeScript 1.10.0
var ButtonView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ButtonView = (function(superClass) {
  extend(ButtonView, superClass);

  function ButtonView() {
    return ButtonView.__super__.constructor.apply(this, arguments);
  }

  ButtonView.prototype.className = "ButtonView";

  ButtonView.prototype.events = Modernizr.touch ? {
    "touchstart .button": "onClick"
  } : {
    "click .button": "onClick"
  };

  ButtonView.prototype.getValue = function() {
    return this.answer;
  };

  ButtonView.prototype.setValue = function(values) {
    var selector;
    if (values == null) {
      values = [];
    }
    if (!_(values).isArray()) {
      values = [values];
    }
    this.answer = _.union(values, this.options);
    selector = this.answer.map(function(value) {
      return "[data-value='" + value + "']";
    }).join(',');
    this.$el.find(".button").removeClass("selected");
    return this.$el.find(selector).addClass("selected");
  };

  ButtonView.prototype.onChange = function(event) {
    var value;
    value = _.map($(event.target).find("option:selected"), function(x) {
      return $(x).attr('data-answer');
    });
    return this.trigger("change", this.el);
  };

  ButtonView.prototype.hybridClick = function(opts) {
    this.$el.find(".button").removeClass("selected");
    if (!opts.checkedBefore) {
      opts.$target.addClass("selected");
      return this.answer = "";
    } else {
      return this.answer = opts.value;
    }
  };

  ButtonView.prototype.singleClick = function(opts) {
    this.$el.find(".button").removeClass("selected");
    opts.$target.addClass("selected");
    return this.answer = opts.value;
  };

  ButtonView.prototype.multipleClick = function(opts) {
    if (opts.checkedBefore) {
      opts.$target.removeClass("selected");
    } else {
      opts.$target.addClass("selected");
    }
    return this.answer[opts.value] = opts.checkedBefore ? "unchecked" : "checked";
  };

  ButtonView.prototype.onClick = function(event) {
    var options;
    options = {
      $target: $(event.target),
      value: $(event.target).attr('data-value'),
      checkedBefore: $(event.target).hasClass("selected")
    };
    this[this.mode + "Click"](options);
    return this.trigger("change", this.el);
  };

  ButtonView.prototype.initialize = function(options) {
    var answer;
    this.mode = options.mode;
    this.options = options.options;
    if (this.mode === "single" || this.mode === "open") {
      answer = "";
    } else if (this.mode === "multiple") {
      answer = {};
      this.options.forEach(function(option) {
        return answer[option.value] = "unchecked";
      });
    }
    return this.answer = answer;
  };

  ButtonView.prototype.render = function() {
    var htmlOptions;
    htmlOptions = "";
    this.options.forEach(function(option, i) {
      var label, selectedClass, styleClass, value;
      styleClass = i === 0 ? "left" : i === this.options.length - 1 ? "right" : "";
      value = option.value;
      label = option.label;
      selectedClass = this.mode === "multiple" && this.answer[value] === "checked" ? "selected" : this.mode === "single" && this.answer === value ? "selected" : "";
      return htmlOptions += "<div class='button " + styleClass + " " + selectedClass + "' data-value='" + value + "'>" + label + "</div>";
    }, this);
    this.$el.html("" + htmlOptions).addClass(this.className);
    return this.trigger("rendered");
  };

  return ButtonView;

})(Backbone.View);
