// Generated by CoffeeScript 1.10.0
var AssessmentDataEntryView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssessmentDataEntryView = (function(superClass) {
  extend(AssessmentDataEntryView, superClass);

  function AssessmentDataEntryView() {
    this.saveResult = bind(this.saveResult, this);
    this.updateCurrent = bind(this.updateCurrent, this);
    return AssessmentDataEntryView.__super__.constructor.apply(this, arguments);
  }

  AssessmentDataEntryView.prototype.events = {
    "change #subtest_select": "updateCurrent",
    'click .prev_subtest': 'prevSubtest',
    'click .next_subtest': 'nextSubtest',
    'click .save': 'saveResult'
  };

  AssessmentDataEntryView.prototype.prevSubtest = function() {
    var select;
    select = document.getElementById("subtest_select");
    if (select.selectedIndex === 0) {
      return;
    }
    select.selectedIndex = select.selectedIndex - 1;
    return this.updateCurrent();
  };

  AssessmentDataEntryView.prototype.nextSubtest = function() {
    var select;
    select = document.getElementById("subtest_select");
    if (select.selectedIndex === $("#subtest_select option").length - 1) {
      return;
    }
    select.selectedIndex = select.selectedIndex + 1;
    return this.updateCurrent();
  };

  AssessmentDataEntryView.prototype.initialize = function(options) {
    var key, value;
    this.savedOn = {};
    for (key in options) {
      value = options[key];
      this[key] = value;
    }
    this.result = new Result({
      assessmentId: this.assessment.id,
      dataEntry: true,
      blank: true
    });
    this.views = [];
    return this.viewsBySubtestId = {};
  };

  AssessmentDataEntryView.prototype.render = function() {
    var i, j, len, prototype, ref, selector, subtest, subtests, view;
    selector = "<button class='prev_subtest'>&lt;</button> <select id='subtest_select'> " + (((function() {
      var j, len, ref, results;
      ref = this.assessment.subtests.models;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        subtest = ref[i];
        results.push("<option data-subtestId='" + subtest.id + "' " + (i === 0 ? "selected='selected'" : '') + ">" + (subtest.get("name")) + "</option>");
      }
      return results;
    }).call(this)).join('')) + " </select> <button class='next_subtest'>&gt;</button> <br>";
    subtests = "<section id='current_subtest'> " + (((function() {
      var j, len, ref, results;
      ref = this.assessment.subtests.models;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        subtest = ref[j];
        results.push("<div id='" + subtest.id + "' class='confirmation subtest_container'></div>");
      }
      return results;
    }).call(this)).join('')) + " </section>";
    this.$el.html("<a href='#assessments'><button class='navigation'>Back</button></a><br> <h1>" + (this.assessment.escape("name")) + "</h1> " + selector + " <button class='command save'>Save</button> <small class='small_grey last_saved'></small> " + subtests);
    ref = this.assessment.subtests.models;
    for (j = 0, len = ref.length; j < len; j++) {
      subtest = ref[j];
      prototype = subtest.get("prototype");
      this[prototype + "Init"](subtest);
    }
    this.$subEl = this.$el.find("#current_subtest");
    this.updateCurrent();
    this.result.set("subtestData", (function() {
      var k, len1, ref1, results;
      ref1 = this.views;
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        view = ref1[k];
        results.push(this.subtestDataObject(view.model));
      }
      return results;
    }).call(this));
    this.result.add({
      name: "Assessment complete",
      prototype: "complete",
      data: {
        "comment": "Data entry feature",
        "end_time": (new Date()).getTime()
      },
      sum: {
        correct: 1,
        incorrect: 0,
        missing: 0,
        total: 1
      },
      subtestId: "result"
    });
    return this.trigger("rendered");
  };

  AssessmentDataEntryView.prototype.updateCurrent = function() {
    Utils.working(true);
    return this.saveResult({
      error: (function(_this) {
        return function() {
          Utils.midAlert("Result save error");
          return Utils.working(false);
        };
      })(this),
      success: (function(_this) {
        return function() {
          Utils.working(false);
          _this.subtestId = _this.$el.find("#subtest_select option:selected").attr("data-subtestId");
          _this.$subEl.find(".subtest_container").hide();
          _this.$subEl.find("#" + _this.subtestId).show();
          _this.subtest = _this.assessment.subtests.get(_this.subtestId);
          _this.trigger("rendered");
          return _this.savedOn[_this.subtestId] = true;
        };
      })(this)
    });
  };

  AssessmentDataEntryView.prototype.saveResult = function(callbacks) {
    if (callbacks == null) {
      callbacks = {};
    }
    if (this.subtest == null) {
      return callbacks.success();
    }
    this.result.insert(this.subtestDataObject(this.subtest));
    return this.result.save(null, {
      success: (function(_this) {
        return function(model) {
          _this.$el.find(".last_saved").html("Last saved: " + moment(new Date(_this.result.get('updated'))).format('MMM DD HH:mm'));
          return typeof callbacks.success === "function" ? callbacks.success(model) : void 0;
        };
      })(this),
      error: (function(_this) {
        return function(error, msg) {
          console.log("save error");
          console.log(arguments);
          return typeof callbacks.error === "function" ? callbacks.error(error, msg) : void 0;
        };
      })(this)
    });
  };

  AssessmentDataEntryView.prototype.updateCompletedResult = function() {
    var result;
    if (_.keys(this.savedOn).length === this.views.length) {
      result = {
        name: "Assessment complete",
        prototype: "complete",
        data: {
          "comment": this.$el.find('#additional_comments').val() || "",
          "end_time": (new Date()).getTime()
        },
        subtestId: "result"
      };
      if (!this.completedAlready) {
        this.result.add(result);
        return this.completedAlready = true;
      } else {
        this.result.insert(result);
        return this.resultSave();
      }
    }
  };

  AssessmentDataEntryView.prototype.subtestDataObject = function(subtest) {
    var view;
    view = this.viewsBySubtestId[subtest.id];
    return {
      name: subtest.get("name"),
      data: view.getResult(),
      subtestHash: subtest.get("hash"),
      subtestId: subtest.id,
      prototype: subtest.get("prototype")
    };
  };

  AssessmentDataEntryView.prototype.gridInit = function(subtest) {
    var view;
    view = new GridRunView({
      model: subtest,
      dataEntry: true
    });
    return this.addRenderView(view, subtest);
  };

  AssessmentDataEntryView.prototype.surveyInit = function(subtest) {
    var view;
    view = new SurveyRunView({
      model: subtest,
      dataEntry: true,
      parent: {
        gridWasAutostopped: function() {
          return false;
        }
      }
    });
    return this.addRenderView(view, subtest);
  };

  AssessmentDataEntryView.prototype.locationInit = function(subtest) {
    var view;
    view = new LocationRunView({
      model: subtest,
      dataEntry: true
    });
    return this.addRenderView(view, subtest);
  };

  AssessmentDataEntryView.prototype.datetimeInit = function(subtest) {
    var view;
    view = new DatetimeRunView({
      model: subtest,
      dataEntry: true
    });
    return this.addRenderView(view, subtest);
  };

  AssessmentDataEntryView.prototype.idInit = function(subtest) {
    var view;
    view = new IdRunView({
      model: subtest,
      dataEntry: true
    });
    return this.addRenderView(view, subtest);
  };

  AssessmentDataEntryView.prototype.consentInit = function(subtest) {
    var view;
    view = new ConsentRunView({
      model: subtest,
      dataEntry: true
    });
    return this.addRenderView(view, subtest);
  };

  AssessmentDataEntryView.prototype.addRenderView = function(view, subtest) {
    var $element;
    $element = this.$el.find("#" + subtest.id);
    view.setElement($element);
    view.render();
    this.viewsBySubtestId[subtest.id] = view;
    return this.views.push(view);
  };

  return AssessmentDataEntryView;

})(Backbone.View);
