// Generated by CoffeeScript 1.10.0
var AssessmentRunView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssessmentRunView = (function(superClass) {
  extend(AssessmentRunView, superClass);

  function AssessmentRunView() {
    this.saveResult = bind(this.saveResult, this);
    this.reset = bind(this.reset, this);
    this.step = bind(this.step, this);
    this.skip = bind(this.skip, this);
    return AssessmentRunView.__super__.constructor.apply(this, arguments);
  }

  AssessmentRunView.prototype.className = "AssessmentRunView";

  AssessmentRunView.prototype.initialize = function(options) {
    var hasSequences, i, j, places, ref, resultView, sequences;
    this.abortAssessment = false;
    this.index = 0;
    this.model = options.model;
    this.orderMap = [];
    this.enableCorrections = false;
    Tangerine.tempData = {};
    this.rendered = {
      "assessment": false,
      "subtest": false
    };
    Tangerine.activity = "assessment run";
    this.subtestViews = [];
    this.model.subtests.sort();
    this.model.subtests.each((function(_this) {
      return function(model) {
        return _this.subtestViews.push(new SubtestRunView({
          model: model,
          parent: _this
        }));
      };
    })(this));
    hasSequences = this.model.has("sequences") && !_.isEmpty(_.compact(_.flatten(this.model.get("sequences"))));
    if (hasSequences) {
      sequences = this.model.get("sequences");
      places = Tangerine.settings.get("sequencePlaces");
      if (places == null) {
        places = {};
      }
      if (places[this.model.id] == null) {
        places[this.model.id] = 0;
      }
      if (places[this.model.id] < sequences.length - 1) {
        places[this.model.id]++;
      } else {
        places[this.model.id] = 0;
      }
      Tangerine.settings.save("sequencePlaces", places);
      this.orderMap = sequences[places[this.model.id]];
      this.orderMap[this.orderMap.length] = this.subtestViews.length;
    } else {
      for (i = j = 0, ref = this.subtestViews.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        this.orderMap[i] = i;
      }
    }
    this.result = new Result({
      assessmentId: this.model.id,
      assessmentName: this.model.get("name"),
      blank: true
    });
    if (hasSequences) {
      this.result.set({
        "order_map": this.orderMap
      });
    }
    resultView = new ResultView({
      model: this.result,
      assessment: this.model,
      assessmentView: this
    });
    return this.subtestViews.push(resultView);
  };

  AssessmentRunView.prototype.render = function() {
    var currentView;
    currentView = this.subtestViews[this.orderMap[this.index]];
    if (this.model.subtests.length === 0) {
      this.$el.html("<h1>Oops...</h1><p>\"" + (this.model.get('name')) + "\" is blank. Perhaps you meant to add some subtests.</p>");
      this.trigger("rendered");
    } else {
      this.$el.html("<h1>" + (this.model.get('name')) + "</h1> <div id='progress'></div>");
      this.$el.find('#progress').progressbar({
        value: (this.index + 1) / (this.model.subtests.length + 1) * 100
      });
      currentView.on("rendered", (function(_this) {
        return function() {
          return _this.flagRender("subtest");
        };
      })(this));
      currentView.on("subRendered", (function(_this) {
        return function() {
          return _this.trigger("subRendered");
        };
      })(this));
      currentView.on("next", (function(_this) {
        return function() {
          return _this.step(1);
        };
      })(this));
      currentView.on("back", (function(_this) {
        return function() {
          return _this.step(-1);
        };
      })(this));
      currentView.render();
      this.$el.append(currentView.el);
    }
    return this.flagRender("assessment");
  };

  AssessmentRunView.prototype.flagRender = function(object) {
    this.rendered[object] = true;
    if (this.rendered.assessment && this.rendered.subtest) {
      return this.trigger("rendered");
    }
  };

  AssessmentRunView.prototype.afterRender = function() {
    var ref;
    return (ref = this.subtestViews[this.orderMap[this.index]]) != null ? typeof ref.afterRender === "function" ? ref.afterRender() : void 0 : void 0;
  };

  AssessmentRunView.prototype.onClose = function() {
    var j, len, ref, view;
    ref = this.subtestViews;
    for (j = 0, len = ref.length; j < len; j++) {
      view = ref[j];
      view.close();
    }
    this.result.clear();
    return Tangerine.nav.setStudent("");
  };

  AssessmentRunView.prototype.abort = function() {
    this.abortAssessment = true;
    return this.step(1);
  };

  AssessmentRunView.prototype.skip = function() {
    var currentView;
    currentView = this.subtestViews[this.orderMap[this.index]];
    return this.result.add({
      name: currentView.model.get("name"),
      data: currentView.getSkipped(),
      subtestId: currentView.model.id,
      skipped: true,
      prototype: currentView.model.get("prototype")
    }, {
      success: (function(_this) {
        return function() {
          return _this.reset(1);
        };
      })(this)
    });
  };

  AssessmentRunView.prototype.step = function(increment) {
    var currentView;
    if (this.abortAssessment) {
      currentView = this.subtestViews[this.orderMap[this.index]];
      this.saveResult(currentView);
      return;
    }
    currentView = this.subtestViews[this.orderMap[this.index]];
    if (currentView.isValid()) {
      return this.saveResult(currentView, increment);
    } else {
      return currentView.showErrors();
    }
  };

  AssessmentRunView.prototype.reset = function(increment) {
    var currentView;
    this.rendered.subtest = false;
    this.rendered.assessment = false;
    currentView = this.subtestViews[this.orderMap[this.index]];
    currentView.close();
    this.index = this.abortAssessment === true ? this.subtestViews.length - 1 : this.index + increment;
    this.render();
    return window.scrollTo(0, 0);
  };

  AssessmentRunView.prototype.saveResult = function(currentView, increment) {
    var i, j, len, prototype, ref, result, subtestId, subtestReplace, subtestResult;
    subtestResult = currentView.getResult();
    subtestId = currentView.model.id;
    prototype = currentView.model.get("prototype");
    subtestReplace = null;
    ref = this.result.get('subtestData');
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      result = ref[i];
      if (subtestId === result.subtestId) {
        subtestReplace = i;
      }
    }
    if (subtestReplace !== null) {
      if (prototype !== 'gps') {
        this.result.insert({
          name: currentView.model.get("name"),
          data: subtestResult.body,
          subtestHash: subtestResult.meta.hash,
          subtestId: currentView.model.id,
          prototype: currentView.model.get("prototype"),
          sum: currentView.getSum()
        });
      }
      return this.reset(increment);
    } else {
      return this.result.add({
        name: currentView.model.get("name"),
        data: subtestResult.body,
        subtestHash: subtestResult.meta.hash,
        subtestId: currentView.model.id,
        prototype: currentView.model.get("prototype"),
        sum: currentView.getSum()
      }, {
        success: (function(_this) {
          return function() {
            return _this.reset(increment);
          };
        })(this)
      });
    }
  };

  return AssessmentRunView;

})(Backbone.View);
