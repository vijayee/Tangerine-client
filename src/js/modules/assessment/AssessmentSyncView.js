// Generated by CoffeeScript 1.10.0
var AssessmentSyncView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

AssessmentSyncView = (function(superClass) {
  extend(AssessmentSyncView, superClass);

  function AssessmentSyncView() {
    this.ensureCredentials = bind(this.ensureCredentials, this);
    this.verifyTimeout = bind(this.verifyTimeout, this);
    this.onVerifySuccess = bind(this.onVerifySuccess, this);
    this.getDocIds = bind(this.getDocIds, this);
    this.upload = bind(this.upload, this);
    this.download = bind(this.download, this);
    return AssessmentSyncView.__super__.constructor.apply(this, arguments);
  }

  AssessmentSyncView.prototype.className = "AssessmentSyncView";

  AssessmentSyncView.prototype.events = {
    "click .back": "goBack",
    "click .show_details": "showDetails",
    "click .keep": "keep",
    "click .show_login": "showLogin",
    "click .login": "login",
    "click .download": "download",
    "click .upload": "upload"
  };

  AssessmentSyncView.prototype.download = function() {
    var groupDB, localDB;
    this.ensureCredentials();
    groupDB = Tangerine.settings.urlDB("group").replace(/\/\/(.*)@/, "//" + this.user + ":" + this.pass + "@");
    localDB = Tangerine.settings.urlDB("local");
    return this.getDocIds((function(_this) {
      return function(docIds) {
        return $.couch.replicate(groupDB, localDB, {
          success: function(response) {
            Utils.midAlert("Download success");
            return _this.updateConflicts();
          },
          error: function(a, b) {
            return Utils.midAlert("Pull Error<br>" + a + " " + b);
          }
        }, {
          doc_ids: docIds
        });
      };
    })(this));
  };

  AssessmentSyncView.prototype.upload = function() {
    var groupDB, localDB;
    this.ensureCredentials();
    groupDB = Tangerine.settings.urlDB("group").replace(/\/\/(.*)@/, "//" + this.user + ":" + this.pass + "@");
    localDB = Tangerine.settings.urlDB("local");
    return this.getDocIds((function(_this) {
      return function(docIds) {
        return $.couch.replicate(localDB, groupDB, {
          success: function(response) {
            Utils.midAlert("Upload success");
            return _this.updateConflicts();
          },
          error: function(a, b) {
            return Utils.midAlert("Pull Error<br>" + a + " " + b);
          }
        }, {
          doc_ids: docIds
        });
      };
    })(this));
  };

  AssessmentSyncView.prototype.getDocIds = function(callback) {
    var groupDB, groupDKey, localDKey, targetDB;
    groupDB = Tangerine.settings.urlDB("group").replace(/\/\/(.*)@/, "//");
    targetDB = Tangerine.settings.urlDB("local");
    localDKey = Tangerine.settings.urlView("local", "byDKey");
    groupDKey = (Tangerine.settings.location.group.db + Tangerine.settings.couch.view + "byDKey").replace(/\/\/(.*)@/, "//");
    return $.ajax({
      url: groupDKey,
      type: "GET",
      dataType: "jsonp",
      data: {
        keys: JSON.stringify([this.dKey])
      },
      error: (function(_this) {
        return function(a, b) {
          return Utils.midAlert("Pull error<br>" + a + " " + b);
        };
      })(this),
      success: (function(_this) {
        return function(data) {
          var datum, docList, i, len, ref;
          docList = [];
          ref = data.rows;
          for (i = 0, len = ref.length; i < len; i++) {
            datum = ref[i];
            docList.push(datum.id);
          }
          return $.ajax({
            url: localDKey,
            type: "POST",
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify({
              keys: [_this.dKey]
            }),
            error: function(a, b) {
              return Utils.midAlert("Pull error<br>" + a + " " + b);
            },
            success: function(data) {
              var j, len1, ref1;
              ref1 = data.rows;
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                datum = ref1[j];
                docList.push(datum.id);
              }
              docList = _.uniq(docList);
              return callback(docList);
            }
          });
        };
      })(this)
    });
  };

  AssessmentSyncView.prototype.showLogin = function() {
    this.$el.find("#user").val("");
    this.$el.find("#pass").val("");
    this.$el.find(".login_box").toggleClass("confirmation");
    return this.$el.find(".show_login").toggle();
  };

  AssessmentSyncView.prototype.onVerifySuccess = function() {
    clearTimeout(this.timer);
    this.connectionVerified = true;
    this.$el.find("#connection").html("Ok");
    this.$el.find(".show_login").toggle();
    return this.$el.find(".loads").removeClass("confirmation");
  };

  AssessmentSyncView.prototype.login = function() {
    this.user = this.$el.find("#user").val();
    this.pass = this.$el.find("#pass").val();
    Tangerine.settings.save({
      "server_user": this.user,
      "server_pass": this.pass
    });
    return Tangerine.user.ghostLogin(this.user, this.pass);
  };

  AssessmentSyncView.prototype.verifyTimeout = function() {
    this.$el.find("#connection").html(this.loginButton({
      status: "<br>Failed. Check connection or try again."
    }));
    this.$el.find(".loads").addClass("confirmation");
    return this.removeCredentials();
  };

  AssessmentSyncView.prototype.keep = function(event) {
    var $target, doc, docId, docRev, docsById, i, j, len, len1, onComplete, ref, ref1, results;
    if (!confirm("This will permanently remove the other versions, are you sure?")) {
      return;
    }
    this.deletedCount = 0;
    this.toDeleteCount = 0;
    $target = $(event.target);
    docId = $target.attr("data-docId");
    docRev = $target.attr("data-docRev");
    docsById = _.indexBy("_id", this.loadedDocs);
    onComplete = (function(_this) {
      return function(response) {
        _this.deletedCount++;
        if (_this.deletedCount === _this.toDeleteCount) {
          return _this.updateConflicts();
        }
      };
    })(this);
    ref = docsById[docId];
    for (i = 0, len = ref.length; i < len; i++) {
      doc = ref[i];
      if (doc._rev !== docRev) {
        this.toDeleteCount++;
      }
    }
    ref1 = docsById[docId];
    results = [];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      doc = ref1[j];
      if (doc._rev === docRev) {
        continue;
      }
      results.push(Tangerine.$db.removeDoc({
        "_id": doc._id,
        "_rev": doc._rev
      }, {
        success: (function(_this) {
          return function(response) {
            return onComplete(response);
          };
        })(this),
        error: (function(_this) {
          return function(a, b) {
            return Utils.alert("Error<br>" + a + "<br>" + b);
          };
        })(this)
      }));
    }
    return results;
  };

  AssessmentSyncView.prototype.showDetails = function(event) {
    var $target, docRev;
    $target = $(event.target);
    docRev = $target.attr("data-docRev");
    return this.$el.find("#table_" + docRev).toggleClass("confirmation");
  };

  AssessmentSyncView.prototype.initialize = function(options) {
    this.readyTemplates();
    this.docList = [];
    this.assessment = options.assessment;
    this.dKey = this.assessment.id.substr(-5, 5);
    this.connectionVerified = false;
    this.timer = setTimeout(this.verifyTimeout, 20 * 1000);
    return this.ensureCredentials();
  };

  AssessmentSyncView.prototype.ensureCredentials = function() {
    if (Tangerine.settings.get("server_user") && Tangerine.settings.get("server_pass")) {
      this.user = Tangerine.settings.get("server_user");
      return this.pass = Tangerine.settings.get("server_pass");
    }
  };

  AssessmentSyncView.prototype.goBack = function() {
    return Tangerine.router.landing();
  };

  AssessmentSyncView.prototype.render = function() {
    var connectionBox, name;
    name = this.assessment.getEscapedString("name");
    if (Tangerine.settings.get("context") !== "server") {
      connectionBox = "<div class='info_box grey'> Server connection<br> <span id='connection'>" + (this.loginButton({
        status: "Checking..."
      })) + "</span> </div>";
    }
    this.$el.html("<button class='back navigation'>Back</button> <h1>Assessment Sync</h1> <h2>" + name + "</h2> " + (connectionBox || "") + " <br> <div class='loads confirmation'> <div class='menu_box'> <button class='command upload'>Upload</button><br> <button class='command download'>Download</button> </div> </div> <h2>Conflicts</h2> <div id='conflicts'></div>");
    this.updateConflicts();
    return this.trigger("rendered");
  };

  AssessmentSyncView.prototype.afterRender = function() {
    if (this.user && this.pass) {
      return $.ajax({
        url: Tangerine.settings.urlView("group", "byDKey").replace(/\/\/(.*)@/, "//" + this.user + ":" + this.pass + "@"),
        dataType: "jsonp",
        data: {
          keys: ["testtest"]
        },
        timeout: 15000,
        success: (function(_this) {
          return function() {
            clearTimeout(_this.timer);
            return _this.onVerifySuccess();
          };
        })(this)
      });
    } else {
      clearTimeout(this.timer);
      return this.verifyTimeout();
    }
  };

  AssessmentSyncView.prototype.updateConflicts = function() {
    Utils.working(true);
    Tangerine.$db.view(Tangerine.design_doc + "/conflictsByDKey", {
      error: function(a, b) {
        Utils.midAlert("Error<br>" + a + "<br>" + b);
        return Utils.working(false);
      },
      success: (function(_this) {
        return function(response) {
          var i, len, onComplete, row, rows;
          Utils.working(false);
          if (response.rows.length === 0) {
            _this.$el.find("#conflicts").html("<div class='grey'>None</div>");
            return;
          }
          _this.loadedDocs = [];
          rows = _.pluck(response.rows, "value");
          onComplete = function(oneDoc) {
            var combined, differences, doc, docCount, docId, docsById, hKey, html, i, j, key, len, len1, presentables, rev, revCount, total, value;
            _this.loadedDocs.push(oneDoc);
            total = rows.length;
            if (_this.loadedDocs.length !== total) {
              return;
            }
            html = "";
            docsById = _.indexBy("_id", _this.loadedDocs);
            docCount = 1;
            for (docId in docsById) {
              doc = docsById[docId];
              html += "<b>Document Conflict " + docCount + " " + (doc[0].collection.capitalize()) + "</b>";
              combined = {};
              for (i = 0, len = doc.length; i < len; i++) {
                rev = doc[i];
                for (key in rev) {
                  value = rev[key];
                  if (combined[key] == null) {
                    combined[key] = [];
                  }
                  combined[key].push(JSON.stringify(value));
                }
              }
              differences = [];
              for (key in combined) {
                value = combined[key];
                if (_.uniq(value).length > 1) {
                  differences.push(key);
                }
              }
              revCount = 1;
              for (j = 0, len1 = doc.length; j < len1; j++) {
                rev = doc[j];
                presentables = {};
                for (key in rev) {
                  value = rev[key];
                  if (key === '_rev' || key === '_id' || key === 'hash' || key === 'updated' || key === 'editedBy' || key === "assessmentId" || key === "curriculumId") {
                    continue;
                  }
                  presentables[key] = value;
                }
                html += "<div class='menu_box'> <h3>Version " + (revCount++) + "</h3> <table class='conflict_table'> <tr><td><b>" + rev.name + "</b></td><td><button class='command keep' data-docId='" + rev._id + "' data-docRev='" + rev._rev + "'>Keep</button></td></tr> <tr><th>Updated</th><td>" + rev.updated + "</td></tr> <tr><th>Edited by</th><td>" + rev.editedBy + "</td></tr> </table> <button class='command show_details' data-docRev='" + rev._rev + "'>Show details</button> <table class='confirmation conflict_table' id='table_" + rev._rev + "'>";
                for (key in presentables) {
                  value = presentables[key];
                  hKey = indexOf.call(differences, key) >= 0 ? "<b class='conflict_key'>" + key + "</b>" : key;
                  html += "<tr><th>" + hKey + "</th><td>" + (JSON.stringify(value)) + "</td></tr>";
                }
                html += "</table> </div>";
              }
              docCount++;
            }
            return _this.$el.find("#conflicts").html(html);
          };
          for (i = 0, len = rows.length; i < len; i++) {
            row = rows[i];
            $.ajax({
              url: "/" + Tangerine.db_name + "/" + row._id + "?rev=" + row._rev,
              type: "get",
              dataType: "json",
              success: function(doc) {
                return onComplete(doc);
              }
            });
          }
        };
      })(this)
    });
    return {};
  };

  AssessmentSyncView.prototype.onClose = function() {
    return clearTimeout(this.timer);
  };

  AssessmentSyncView.prototype.removeCredentials = function() {
    Tangerine.settings.unset("server_user");
    Tangerine.settings.unset("server_pass");
    return Tangerine.settings.save();
  };

  AssessmentSyncView.prototype.readyTemplates = function() {
    return this.loginButton = _.template("{{status}} <button class='command show_login'>Login</button><br> <div class='confirmation login_box'> <div> <label for='user'>Username</label><input id='user' type='text'><br> <label for='pass'>Password</label><input id='pass' type='password'> <button class='command login'>Login</button> </div> </div>");
  };

  return AssessmentSyncView;

})(Backbone.View);
