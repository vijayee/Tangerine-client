// Generated by CoffeeScript 1.10.0
var AssessmentsView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AssessmentsView = (function(superClass) {
  extend(AssessmentsView, superClass);

  function AssessmentsView() {
    this.render = bind(this.render, this);
    return AssessmentsView.__super__.constructor.apply(this, arguments);
  }

  AssessmentsView.prototype.className = "AssessmentsView";

  AssessmentsView.prototype.tagName = "section";

  AssessmentsView.prototype.events = {
    "click .toggle_archived": "toggleArchived"
  };

  AssessmentsView.prototype.toggleArchived = function(event) {
    var $container;
    if (this.archivedIsVisible) {
      this.archivedIsVisible = false;
      $container = this.$el.find(".archived_list").addClass("confirmation");
      return this.$el.find(".toggle_archived").html("Show");
    } else {
      this.archivedIsVisible = true;
      $container = this.$el.find(".archived_list").removeClass("confirmation");
      return this.$el.find(".toggle_archived").html("Hide");
    }
  };

  AssessmentsView.prototype.initialize = function(options) {
    this.assessments = options.assessments;
    this.subviews = [];
    return this.archivedIsVisible = false;
  };

  AssessmentsView.prototype.render = function(event) {
    var htmlList, i, len, ref, results, view;
    console.log("assessments view render");
    this.closeViews();
    if (this.assessments.length === 0) {
      return this.$el.html("<p class='grey'>No assessments.</p>");
    }
    this.subviews = [];
    htmlList = "";
    console.log(this.assessments.length);
    console.log(this.assessments);
    this.assessments.each((function(_this) {
      return function(assessment) {
        var newView;
        newView = new AssessmentListElementView({
          "model": assessment,
          "showAll": _this.showAll
        });
        _this.subviews.push(newView);
        return htmlList += "<li class='AssessmentListElementView' id='" + assessment.id + "'></li>";
      };
    })(this));
    this.$el.html("<ul class='active_list assessment_list'> " + htmlList + " </ul>");
    ref = this.subviews;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      view = ref[i];
      results.push(view.setElement(this.$el.find("#" + view.model.id)).render());
    }
    return results;
  };

  AssessmentsView.prototype.closeViews = function() {
    var i, len, ref, view;
    ref = this.subviews;
    for (i = 0, len = ref.length; i < len; i++) {
      view = ref[i];
      view.close();
    }
    return this.subviews = [];
  };

  AssessmentsView.prototype.onClose = function() {
    return this.closeViews();
  };

  return AssessmentsView;

})(Backbone.View);
