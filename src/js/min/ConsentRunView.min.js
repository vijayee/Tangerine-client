var ConsentRunView,bind=function(t,n){return function(){return t.apply(n,arguments)}},extend=function(t,n){function e(){this.constructor=t}for(var o in n)hasProp.call(n,o)&&(t[o]=n[o]);return e.prototype=n.prototype,t.prototype=new e,t.__super__=n.prototype,t},hasProp={}.hasOwnProperty;ConsentRunView=function(n){function e(){return this.onConsentChange=bind(this.onConsentChange,this),e.__super__.constructor.apply(this,arguments)}return extend(e,n),e.prototype.className="ConsentRunView",e.prototype.events={"click #non_consent_confirm":"noConsent"},e.prototype.onConsentChange=function(){return"yes"===this.consentButton.answer?this.clearMessages():this.showNonConsent()},e.prototype.i18n=function(){return this.text={defaultConsent:t("ConsentRunView.label.default_consent_prompt"),confirmNonconsent:t("ConsentRunView.label.confirm_nonconsent"),confirm:t("ConsentRunView.button.confirm"),yes:t("ConsentRunView.button.yes_continue"),no:t("ConsentRunView.button.no_stop"),select:t("ConsentRunView.message.select")}},e.prototype.initialize=function(){return this.i18n(),this.confirmedNonConsent=!1,this.model=this.options.model,this.parent=this.options.parent,this.dataEntry=this.options.dataEntry},e.prototype.render=function(){var t,n;return this.$el.html("<div class='question'> <label>"+(this.model.get("prompt")||this.text.defaultConsent)+"</label> <div class='messages'></div> <div class='non_consent_form confirmation'> <div>"+this.text.confirmNonconsent+"</div> <button id='non_consent_confirm' class='command'>"+this.text.confirm+"</button> </div> <div class='consent-button'></div> </div>"),this.dataEntry||(n=this.parent.parent.result.getByHash(this.model.get("hash")),n&&(t=n.consent)),this.consentButton=new ButtonView({options:[{label:this.text.yes,value:"yes"},{label:this.text.no,value:"no"}],mode:"single",dataEntry:!1,answer:t||""}),this.consentButton.setElement(this.$el.find(".consent-button")),this.consentButton.on("change",this.onConsentChange),this.consentButton.render(),this.trigger("rendered"),this.trigger("ready")},e.prototype.isValid=function(){return this.confirmedNonConsent===!1?"yes"===this.consentButton.answer?!0:!1:!0},e.prototype.showNonConsent=function(){return this.$el.find(".non_consent_form").show(250)},e.prototype.clearMessages=function(){return this.$el.find(".non_consent_form").hide(250),this.$el.find(".messages").html("")},e.prototype.noConsent=function(){return this.confirmedNonConsent=!0,this.parent.abort(),!1},e.prototype.getSkipped=function(){return{consent:"skipped"}},e.prototype.showErrors=function(){var t;return t=this.consentButton.answer,"no"===t?(Utils.midAlert(this.text.confirm),this.showNonConsent()):void 0===t?$(".messages").html(this.text.select):void 0},e.prototype.getResult=function(){return{consent:this.consentButton.answer}},e.prototype.onClose=function(){var t;return null!=(t=this.consentButton)&&"function"==typeof t.close?t.close():void 0},e}(Backbone.View);