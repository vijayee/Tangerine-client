var QuestionsEditView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function n(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;QuestionsEditView=function(t){function e(){return this.render=bind(this.render,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="questions_edit_view",e.prototype.tagName="ul",e.prototype.initialize=function(t){return this.views=[],this.questions=t.questions},e.prototype.onClose=function(){return this.closeViews()},e.prototype.closeViews=function(){var t,e,n,r,s;for(n=this.views,r=[],t=0,e=n.length;e>t;t++)s=n[t],r.push(s.close());return r},e.prototype.render=function(){var t,e,n,r,s,i;for(this.closeViews(),s=this.questions.models,t=e=0,n=s.length;n>e;t=++e)r=s[t],i=new QuestionsEditListElementView({question:r}),this.views.push(i),i.on("deleted",this.render),i.on("duplicate",function(t){return function(){return t.refetchAndRender()}}(this)),i.on("question-edit",function(t){return function(e){return t.trigger("question-edit",e)}}(this)),i.render(),this.$el.append(i.el);return this.$el.sortable({forceHelperSize:!0,forcePlaceholderSize:!0,handle:".sortable_handle",start:function(t,e){return e.item.addClass("drag_shadow")},stop:function(t,e){return e.item.removeClass("drag_shadow")},update:function(t){return function(){var e,n,r,s,i,o,u,a,c;for(n=function(){var t,e,n,r;for(n=this.$el.find("li.question_list_element"),r=[],t=0,e=n.length;e>t;t++)o=n[t],r.push($(o).attr("data-id"));return r}.call(t),r=0,a=[],r=s=0,i=n.length;i>s;r=++s)e=n[r],u=t.questions.get(e).attributes,u.order=r,a.push(u);return c={docs:a},$.ajax({type:"POST",contentType:"application/json; charset=UTF-8",dataType:"json",url:Tangerine.settings.urlBulkDocs(),data:JSON.stringify(c),success:function(){return t.refetchAndRender()},error:function(){return Utils.midAlert("Duplication error")}})}}(this)})},e.prototype.refetchAndRender=function(){var t;return t=this.questions.models[0],this.questions.fetch({viewOptions:{key:"question-"+t.get("assessmentId")},success:function(e){return function(){return e.questions=new Questions(e.questions.where({subtestId:t.get("subtestId")})),e.render(!0)}}(this)})},e}(Backbone.View);