var AssessmentRunView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function s(){this.constructor=e}for(var i in t)hasProp.call(t,i)&&(e[i]=t[i]);return s.prototype=t.prototype,e.prototype=new s,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;AssessmentRunView=function(e){function t(){return this.saveResult=bind(this.saveResult,this),this.reset=bind(this.reset,this),this.step=bind(this.step,this),this.skip=bind(this.skip,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="AssessmentRunView",t.prototype.initialize=function(e){var t,s,i,n,r,o,u;if(this.abortAssessment=!1,this.index=0,this.model=e.model,this.orderMap=[],this.enableCorrections=!1,Tangerine.tempData={},this.rendered={assessment:!1,subtest:!1},Tangerine.activity="assessment run",this.subtestViews=[],this.model.subtests.sort(),this.model.subtests.each(function(e){return function(t){return e.subtestViews.push(new SubtestRunView({model:t,parent:e}))}}(this)),t=this.model.has("sequences")&&!_.isEmpty(_.compact(_.flatten(this.model.get("sequences")))))u=this.model.get("sequences"),n=Tangerine.settings.get("sequencePlaces"),null==n&&(n={}),null==n[this.model.id]&&(n[this.model.id]=0),n[this.model.id]<u.length-1?n[this.model.id]++:n[this.model.id]=0,Tangerine.settings.save("sequencePlaces",n),this.orderMap=u[n[this.model.id]],this.orderMap[this.orderMap.length]=this.subtestViews.length;else for(s=i=0,r=this.subtestViews.length;r>=0?r>=i:i>=r;s=r>=0?++i:--i)this.orderMap[s]=s;return this.result=new Result({assessmentId:this.model.id,assessmentName:this.model.get("name"),blank:!0}),t&&this.result.set({order_map:this.orderMap}),o=new ResultView({model:this.result,assessment:this.model,assessmentView:this}),this.subtestViews.push(o)},t.prototype.render=function(){var e;return e=this.subtestViews[this.orderMap[this.index]],0===this.model.subtests.length?(this.$el.html('<h1>Oops...</h1><p>"'+this.model.get("name")+'" is blank. Perhaps you meant to add some subtests.</p>'),this.trigger("rendered")):(this.$el.html("<h1>"+this.model.get("name")+"</h1> <div id='progress'></div>"),this.$el.find("#progress").progressbar({value:(this.index+1)/(this.model.subtests.length+1)*100}),e.on("rendered",function(e){return function(){return e.flagRender("subtest")}}(this)),e.on("subRendered",function(e){return function(){return e.trigger("subRendered")}}(this)),e.on("next",function(e){return function(){return e.step(1)}}(this)),e.on("back",function(e){return function(){return e.step(-1)}}(this)),e.render(),this.$el.append(e.el)),this.flagRender("assessment")},t.prototype.flagRender=function(e){return this.rendered[e]=!0,this.rendered.assessment&&this.rendered.subtest?this.trigger("rendered"):void 0},t.prototype.afterRender=function(){var e;return null!=(e=this.subtestViews[this.orderMap[this.index]])&&"function"==typeof e.afterRender?e.afterRender():void 0},t.prototype.onClose=function(){var e,t,s,i;for(s=this.subtestViews,e=0,t=s.length;t>e;e++)i=s[e],i.close();return this.result.clear(),Tangerine.nav.setStudent("")},t.prototype.abort=function(){return this.abortAssessment=!0,this.step(1)},t.prototype.skip=function(){var e;return e=this.subtestViews[this.orderMap[this.index]],this.result.add({name:e.model.get("name"),data:e.getSkipped(),subtestId:e.model.id,skipped:!0,prototype:e.model.get("prototype")},{success:function(e){return function(){return e.reset(1)}}(this)})},t.prototype.step=function(e){var t;return this.abortAssessment?(t=this.subtestViews[this.orderMap[this.index]],void this.saveResult(t)):(t=this.subtestViews[this.orderMap[this.index]],t.isValid()?this.saveResult(t,e):t.showErrors())},t.prototype.reset=function(e){var t;return this.rendered.subtest=!1,this.rendered.assessment=!1,t=this.subtestViews[this.orderMap[this.index]],t.close(),this.index=this.abortAssessment===!0?this.subtestViews.length-1:this.index+e,this.render(),window.scrollTo(0,0)},t.prototype.saveResult=function(e,t){var s,i,n,r,o,u,h,d,a;for(a=e.getResult(),h=e.model.id,r=e.model.get("prototype"),d=null,o=this.result.get("subtestData"),s=i=0,n=o.length;n>i;s=++i)u=o[s],h===u.subtestId&&(d=s);return null!==d?("gps"!==r&&this.result.insert({name:e.model.get("name"),data:a.body,subtestHash:a.meta.hash,subtestId:e.model.id,prototype:e.model.get("prototype"),sum:e.getSum()}),this.reset(t)):this.result.add({name:e.model.get("name"),data:a.body,subtestHash:a.meta.hash,subtestId:e.model.id,prototype:e.model.get("prototype"),sum:e.getSum()},{success:function(e){return function(){return e.reset(t)}}(this)})},t}(Backbone.View);